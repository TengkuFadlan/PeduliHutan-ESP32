/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 09.05.2025 06:43:52

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242640;
#else
constexpr int kTensorArenaSize = 241616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 20428, -30099, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00023085347493179142, 0.00014809088315814734, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 33,2,-54,67,-73,-21,-58,127,71,-41,-27,-26,-23,33,-23,11,101,-57,0,-88,62,24,38,-49,-39,-81,-22,46,-6,-30,1,90, 
  /* [1][0][][] */ 47,71,74,-62,-74,86,6,-8,-28,0,33,107,123,39,17,15,-43,19,-43,-92,-78,32,21,117,80,72,-36,10,118,-117,-127,-9, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0046118535101413727, 0.0029584716539829969, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -906, -5, -162, -991, -1177, 29, -1195, 562, -1017, -1147, -168, -993, -83, 8, -1459, -1327, -184, -974, -489, -1244, -924, -322, -855, -156, -1436, -824, -707, -1198, -539, -583, -569, -331, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.7766643294598907e-05, 6.8616558564826846e-05, 6.8410306994337589e-05, 5.024100755690597e-05, 5.0592730985954404e-05, 4.9587717512622476e-05, 5.0694470701273531e-05, 0.00010149615263799205, 5.1032457122346386e-05, 5.0900132919196039e-05, 7.3199036705773324e-05, 5.0998249207623303e-05, 5.0276732508791611e-05, 5.2439081628108397e-05, 5.4076637752586976e-05, 5.210122253629379e-05, 6.6305387008469552e-05, 5.213537224335596e-05, 0.00015162398631218821, 4.9294860218651593e-05, 5.0972928875125945e-05, 5.1536993851186708e-05, 5.5705560953356326e-05, 4.8523288569413126e-05, 5.315252928994596e-05, 5.4302861826727167e-05, 5.0991784519283101e-05, 4.9974303692579269e-05, 5.5180036724777892e-05, 4.9089925596490502e-05, 4.6188863052520901e-05, 6.1489663494285196e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -51,-61,53,-15,47,-28,-87,-101,25,-98,-102,-19,21,-11,-53,23,-63,-45,-70,-70,-72,-99,-18,59,-103,-18,35,-58,61,2,-40,-96,41,-68,-92,20,-102,-86,-95,0,32,-87,-94,55,8,-99,56,-36,-10,-52,-28,48,-71,-60,-96,50,10,38,71,-101,-68,37,-60,6,-27,-9,31,47,16,52,51,-110,63,-123,9,42,-91,-11,-66,7,16,3,53,-30,-67,-53,-82,57,-1,70,-27,-127,-11,28,16,-8, 
  /* [1][0][][] */ -10,9,-59,8,0,31,27,5,52,-80,-59,78,98,-4,5,54,69,-29,0,96,-26,-1,23,16,23,24,-25,52,10,69,59,-45,28,69,0,8,28,30,-1,-38,-43,1,-2,-64,-39,24,-18,-42,-25,-34,127,46,-11,71,-72,-23,15,82,15,56,-13,64,-33,-67,-17,23,51,36,62,26,24,21,-64,61,-56,24,77,-31,-28,47,-60,61,-25,-59,15,72,-34,-31,51,44,54,-34,64,61,41,8, 
  /* [2][0][][] */ 62,11,-57,64,9,-61,55,59,-63,39,-20,85,127,-1,39,-63,-41,-20,-2,64,-56,-11,65,9,-25,64,63,-15,-39,120,46,61,-53,-7,-52,-76,-66,53,82,-16,-77,-53,16,-10,-73,77,-12,-59,50,44,117,-45,-50,62,-2,25,-57,77,-66,0,17,30,-6,29,83,28,29,67,-60,50,15,-33,26,-38,-4,9,-6,-22,-3,2,15,-56,7,-9,-5,-65,-9,-6,60,67,-16,-29,-17,-50,-2,-35, 
  /* [3][0][][] */ 38,-18,20,-45,-12,21,-119,10,25,9,32,-19,54,58,42,-18,69,89,9,58,74,-96,-77,-121,35,-121,-85,93,17,-111,52,-1,-45,-51,-39,-32,-96,-45,11,18,-45,-103,-108,-22,47,2,-67,-94,44,-87,11,-26,67,5,58,-110,-122,-126,-125,-73,-109,26,-57,115,26,-53,-73,-52,-50,-86,-22,61,-6,-112,28,-60,6,63,61,-76,-97,-127,7,55,4,14,-61,-127,-96,16,20,-65,55,-107,-103,70, 
  /* [4][0][][] */ 17,59,-25,20,-49,22,0,-11,26,51,-34,20,-3,-58,-36,-82,-46,-31,-18,-15,64,-103,47,-4,-41,-31,28,-65,-65,4,-82,-72,33,70,-12,-113,-67,-33,-120,15,-70,-79,-89,-104,2,62,1,22,-6,2,-47,-92,-98,10,-101,-11,5,-107,-4,-14,-23,-87,-63,-80,-65,19,-24,-56,4,-112,-108,-97,-72,-11,67,20,25,-45,-32,-74,-22,-65,-110,-44,-26,32,50,-27,-127,-91,14,14,-3,60,-112,-41, 
  /* [5][0][][] */ 123,-92,51,82,72,-125,28,50,97,-112,7,-41,107,101,18,49,57,52,-89,127,31,48,14,-26,-79,-38,-13,-97,52,124,13,-84,-37,11,-51,2,-102,-37,52,24,-77,-49,50,81,-47,27,34,-53,-102,124,98,39,13,43,10,3,84,70,-94,-30,60,-61,53,-75,-4,89,-20,42,72,10,102,-41,-32,86,-57,-68,53,-45,9,73,84,43,37,112,-70,70,5,53,61,-88,102,27,-1,31,102,-56, 
  /* [6][0][][] */ -9,-64,73,42,-100,-82,-27,33,-35,-95,-20,-103,47,20,73,-127,9,-24,6,63,-92,-125,66,25,-77,-93,-32,-70,-50,-126,14,-90,-101,-127,-61,-115,-35,8,-116,45,47,22,-5,-40,-117,63,-101,-63,-96,-16,-54,-82,25,-73,55,-45,-20,-35,-85,69,-108,-27,31,-83,-68,30,60,-62,43,-30,-117,-29,19,-79,-102,-60,-94,-112,-72,-49,4,-52,12,-47,-85,-99,-60,-107,46,54,62,-10,-71,-78,38,-50, 
  /* [7][0][][] */ -20,34,1,-22,-72,60,1,-6,47,2,-31,-19,-90,-25,34,42,39,17,-4,-31,19,26,8,49,-13,36,25,32,-32,-50,-3,7,13,11,27,43,-29,48,-59,-6,55,-18,42,48,31,5,42,-27,33,-26,-127,-41,-12,11,12,-3,60,-54,-2,-8,-29,-15,19,-48,-75,-18,41,-1,-54,-2,21,42,44,-14,29,40,-41,36,-26,17,51,-21,-39,-52,54,23,-39,34,35,14,10,-1,-30,-7,-25,-22, 
  /* [8][0][][] */ -13,6,-57,-101,6,-5,-87,-44,-17,1,10,57,-16,-65,-93,-86,-82,58,-30,-11,2,-44,45,68,-122,50,16,52,-72,-10,-95,69,62,-51,12,-27,75,-24,-48,38,42,62,-118,-127,-31,-52,-45,70,-2,-97,-83,-27,-61,-34,-51,-118,17,62,-86,63,65,21,8,93,-60,-62,-42,65,-75,21,1,-30,38,31,-16,-2,-63,66,46,40,9,42,-120,-97,-2,11,38,-62,8,-57,-63,62,-94,-104,-66,23, 
  /* [9][0][][] */ -25,-21,71,14,43,-86,-67,-125,9,16,-35,20,4,-94,-112,-49,-20,-27,-78,-33,-23,58,-118,-115,69,-36,-37,-3,-38,-50,-102,58,26,-26,0,-43,-91,-13,-2,-64,13,-83,19,-106,41,-10,-116,19,17,-29,-64,-68,37,-90,-84,61,46,-77,-37,-30,-101,63,44,-91,-72,-23,62,14,-64,59,66,-102,-21,42,-116,-107,-93,-127,-60,63,1,-5,80,-3,-64,-107,4,-41,53,1,-50,108,65,-9,25,-56, 
  /* [10][0][][] */ -5,36,38,-35,13,42,62,17,23,4,16,-37,127,55,-32,13,-27,43,-83,-15,-9,15,28,-44,13,42,-72,-84,-31,116,-62,-49,40,61,74,32,-35,-3,-4,22,-24,64,-60,-27,-74,-33,-3,-45,-14,18,82,14,18,31,-59,-11,-69,5,-6,-29,24,39,78,4,92,-46,-59,-2,5,-6,-49,-29,54,42,-73,56,15,32,34,13,37,4,46,77,-66,36,60,-4,24,0,-6,-91,-22,-28,-3,-36, 
  /* [11][0][][] */ 62,-14,-35,63,61,8,22,0,70,55,-90,76,-52,-94,-2,-76,-71,-114,9,-12,2,40,-3,-115,-111,-119,-42,38,43,-52,-6,-65,-98,-92,21,12,-75,31,-46,-74,-50,64,-91,-19,-63,-76,-107,-97,42,54,57,5,-101,-115,-11,-26,-74,-65,-72,-97,-90,51,27,-19,-17,49,-70,1,29,19,-90,-85,16,40,-120,22,-93,6,-61,51,-114,-39,-86,-73,14,-92,-11,-46,-104,-32,-12,-127,-109,-64,-91,-77, 
  /* [12][0][][] */ 51,45,-67,9,105,-14,-27,30,-65,40,-5,28,52,26,25,-52,-84,-31,-61,-30,28,-7,12,80,-58,-23,86,-104,88,104,-34,108,-85,-50,-27,5,-10,-73,-4,43,95,27,-80,-39,-44,-63,-37,89,-52,-67,13,102,14,29,-89,94,-23,-25,25,59,85,89,17,25,127,30,-37,118,51,95,51,78,84,120,-40,-12,13,26,-102,-83,-59,98,54,35,-34,25,54,120,-76,-95,82,-47,103,-8,67,77, 
  /* [13][0][][] */ 104,-63,73,85,100,81,69,50,58,-108,17,-14,127,72,45,-26,-92,-61,-87,29,56,-20,95,-40,-45,42,5,-1,-69,-27,65,31,23,88,-12,17,-72,-30,9,61,-51,62,-32,8,-50,26,0,-30,19,96,14,-84,-115,38,59,-56,-46,39,-59,-56,-7,78,-50,-5,-45,-52,-73,82,-45,-8,86,16,-68,34,-101,-38,-62,53,67,-52,35,-80,76,24,-66,-80,84,107,-12,-50,-70,-29,100,-37,72,11, 
  /* [14][0][][] */ -45,-114,34,20,46,-55,-47,-120,-96,-61,20,34,-26,-89,-107,-99,-76,-75,-25,0,-62,-9,-36,14,-117,-88,-54,-11,-119,-102,-90,16,51,-44,-58,-23,41,74,0,-123,-24,-120,5,34,20,-117,43,-101,56,8,61,32,41,-14,-47,-15,-72,6,30,44,-16,-95,-32,38,-74,-45,27,-112,-78,-93,-103,62,-33,41,13,-94,11,-120,8,-1,2,-37,-121,-42,-127,-101,-122,63,60,-30,37,-43,57,64,-18,46, 
  /* [15][0][][] */ -12,-48,-51,30,37,-104,21,-106,20,-30,-88,-28,60,-27,-102,-123,44,-20,-82,-5,11,-14,30,60,37,29,3,47,-11,21,27,-108,-22,-21,-85,-29,-86,66,63,-83,-14,64,-68,-48,-5,-91,-63,-94,-33,-92,-31,-3,-110,-111,-67,-31,26,12,-70,60,-65,-88,-25,60,-60,52,-88,-24,-74,-23,19,-89,-16,-35,19,-117,-28,15,58,36,-94,17,-116,-78,-127,-58,-105,4,42,30,-120,-57,16,66,-114,64, 
  /* [16][0][][] */ -72,16,82,-63,-64,78,-44,12,23,49,-83,17,-86,-50,-32,-62,67,55,78,7,58,45,-30,27,-25,18,-48,71,-72,-100,24,1,-59,44,5,48,-20,32,-76,-50,12,-34,26,57,49,61,49,-6,-26,-118,-100,41,-10,44,69,18,-5,21,68,-2,41,89,1,62,-24,-3,-28,52,29,43,-39,-18,7,50,71,63,-29,65,-72,-14,14,-75,13,-15,6,61,56,-13,42,7,39,127,17,-20,-88,-26, 
  /* [17][0][][] */ -19,-116,5,44,-21,-120,-76,-105,21,-99,49,15,54,23,-126,31,11,42,67,69,-127,-31,-10,-70,47,20,-87,31,60,-59,-50,40,-45,-36,12,-21,-33,63,-88,-54,-98,-58,-36,-27,-18,-9,42,-113,52,67,-30,-9,-29,50,57,-86,-115,60,-55,-106,-1,-64,25,79,-83,-87,16,-118,-117,-33,75,-13,-6,-123,-78,41,77,-59,16,-67,-15,-42,-106,-105,-111,28,48,-47,-31,46,-112,-121,-53,54,-7,-1, 
  /* [18][0][][] */ 20,22,23,-42,-9,43,-48,-10,-12,20,-45,-9,-14,-2,6,-27,3,14,19,11,16,-25,-4,-38,18,-43,7,27,-2,4,-6,46,24,-21,-22,-35,-14,11,-22,18,-16,-9,-24,-11,-33,-5,28,-11,2,18,22,28,-38,16,30,44,-19,3,38,-41,6,29,39,104,-29,-50,-22,22,30,-33,-31,24,-15,7,-25,-39,-11,6,-12,-15,-24,-18,-28,-29,21,-6,12,35,-49,0,-18,127,15,53,31,-10, 
  /* [19][0][][] */ -9,0,41,7,28,-98,57,54,54,-81,-1,-38,-107,3,-74,26,38,-116,71,25,-45,44,-73,-15,41,-94,0,-83,-105,-126,-81,15,45,-97,0,-26,-18,-86,-75,-112,12,-126,-97,-17,-101,0,40,-107,-49,6,-59,13,-55,-14,-20,-34,-4,60,30,-49,23,-79,62,29,-86,-28,-48,-25,-32,22,40,-69,-78,-127,-73,-94,-45,-123,-13,66,24,-123,-51,43,-101,-31,-19,-29,52,0,-27,31,-54,71,35,-66, 
  /* [20][0][][] */ -32,50,54,56,-105,67,-7,39,-6,1,-95,-20,-29,46,18,-88,-62,-50,-10,-33,-4,-58,-85,-80,42,-86,-110,43,-1,-18,-53,81,77,20,-40,42,19,-46,-25,-111,-90,-51,-99,-103,-31,-73,-81,71,40,-127,-113,7,30,77,40,-17,58,32,85,50,67,-54,-80,-37,-47,-78,-63,-8,-87,-90,-84,39,-79,-82,19,3,69,45,72,81,55,-23,46,-41,32,75,-38,38,-5,62,37,100,-11,8,-25,-21, 
  /* [21][0][][] */ 40,51,40,-102,100,-58,55,-2,-11,-71,-65,43,61,34,-62,-71,-83,-28,6,16,89,-47,53,-76,53,-77,-33,41,28,71,-29,-51,-10,1,-83,-113,91,62,-103,-40,-16,2,25,-18,-113,-74,-77,68,-39,-19,26,77,15,46,-107,0,-43,60,-68,96,62,-67,4,-32,68,22,-35,-70,-108,-4,61,83,35,-64,46,46,-68,-29,44,82,-1,85,38,-77,10,-96,55,-61,-91,58,105,-127,-45,-52,70,-11, 
  /* [22][0][][] */ 20,-58,-79,-94,41,-83,62,28,-97,49,-75,-114,41,-97,-110,-87,8,39,-127,-81,52,-78,5,5,43,-19,-114,52,-77,-96,-70,-101,-6,30,-14,-5,-20,-31,-62,-109,-18,-28,-11,58,21,-106,54,-41,-78,-101,-9,-32,-82,-87,-63,6,-41,-37,-61,-42,74,-92,-75,-110,-73,-5,-110,-55,45,70,-39,-16,-71,-19,25,-92,10,-59,29,53,59,-93,-76,-106,41,48,60,-42,-63,5,-92,5,8,-15,-46,69, 
  /* [23][0][][] */ 114,-99,-15,53,124,-110,3,-97,58,-77,78,76,9,-91,-10,-17,86,-29,-111,78,72,-72,91,-42,4,-10,76,17,64,50,58,-70,-35,28,28,7,90,-31,-127,3,-108,-16,19,-112,-90,-89,88,8,59,-72,-125,-53,59,-52,-70,52,-76,12,72,46,-105,-62,-45,-22,77,19,-103,-90,45,-10,113,-50,7,-66,-45,-96,54,-23,75,96,-71,-37,-8,-90,75,4,112,-18,-96,19,88,-23,90,-28,-25,92, 
  /* [24][0][][] */ -78,-74,-119,-88,-83,-101,-91,-96,22,63,35,6,68,15,-68,-127,-101,0,-10,-48,47,-101,-81,-65,24,-44,24,11,54,38,-32,-62,-4,-15,12,1,-78,-91,37,-38,-93,-114,48,-32,-7,-63,17,24,-86,-67,-25,-14,23,30,24,-91,-25,34,2,-34,39,-37,20,53,-84,45,-73,-85,-98,7,-76,-53,-62,14,55,47,34,-96,-119,-84,-99,-101,-82,-113,-33,23,-44,-107,-10,-122,-13,-64,-47,-6,-91,-8, 
  /* [25][0][][] */ -109,-65,-86,-40,69,-57,-103,21,12,-93,-51,-4,27,-12,-111,-32,-76,22,-2,-120,34,47,-27,-64,-1,-69,-109,8,38,-69,6,50,49,-110,20,37,61,-84,-29,-42,-90,55,-113,-10,39,13,15,9,-106,46,-66,-18,16,-53,-88,-25,-23,27,-106,45,79,15,8,-13,6,40,-34,-49,-105,-35,-32,-113,13,-127,45,-2,42,41,-10,-12,13,33,-53,28,-84,-62,-99,-93,-37,-51,58,-26,-106,-59,-22,-99, 
  /* [26][0][][] */ 20,-120,-29,-19,-56,-8,-19,-32,-102,-127,74,70,-87,-56,2,-29,73,8,-65,-51,0,47,72,0,17,38,6,27,3,27,-90,-21,-46,-71,-87,-111,-76,56,-43,81,-101,74,32,6,-75,42,-51,74,-38,25,2,87,1,-63,-22,-102,66,42,49,7,-9,-96,39,-24,89,-27,-61,39,-75,58,62,64,55,-91,-98,-9,27,-105,-96,-14,-37,59,66,-68,50,-16,-55,-2,-77,80,-6,-26,-53,72,33,57, 
  /* [27][0][][] */ -16,-19,-80,-114,-127,-86,-86,-40,10,59,5,-118,-49,22,44,-51,30,-40,60,-97,-106,-17,-51,-46,-116,13,-119,-29,29,-2,-54,-34,26,33,-104,-100,-103,-82,-122,49,-107,-11,-2,-12,58,-5,32,62,51,32,25,-90,-103,-100,-31,-55,61,-47,-82,-93,-75,-78,-55,20,8,-66,-122,64,16,-17,-127,-20,26,-71,-33,-101,14,-82,49,61,47,-49,73,-74,-90,-97,-54,0,-67,-30,-56,-38,22,-11,48,22, 
  /* [28][0][][] */ 52,-9,53,6,-127,-79,-103,-60,-67,-84,34,18,-85,-94,-15,62,64,60,-77,21,-42,4,-94,-74,-106,60,-92,-83,-92,-76,-9,-50,-119,6,32,51,5,-94,-68,11,68,14,-74,38,-122,-15,0,8,-12,-80,-90,-37,-102,13,4,-6,7,-20,21,29,-40,-72,-65,8,57,35,-32,43,-96,26,-91,-71,55,-7,-10,-89,-123,-58,-86,18,-94,-96,47,-28,32,-95,40,-100,-118,-62,-65,-75,-67,6,-107,-36, 
  /* [29][0][][] */ 19,49,56,-72,-106,17,-119,-3,64,10,-98,-108,83,-117,-46,-64,-90,80,58,-53,-86,-43,35,-10,-33,-10,-53,1,-88,-70,82,-15,49,-10,-89,-43,-11,78,-15,66,31,75,-59,61,5,77,-69,-26,16,-21,17,-103,71,-105,112,38,-95,19,-31,78,-127,102,-98,-17,-80,-74,33,63,94,-97,4,-85,75,85,79,18,80,-64,-39,13,-10,-99,-26,-84,47,87,18,44,-48,72,76,102,-116,7,-24,33, 
  /* [30][0][][] */ 33,-67,-69,27,-69,13,-72,3,107,-10,-12,-32,-116,0,47,-14,-21,24,57,-94,28,-106,-116,-5,-82,16,-70,79,-46,-127,-79,-10,-74,-72,-118,-47,-16,-9,19,11,81,-90,-9,80,98,-50,93,46,-85,42,-6,-113,64,-57,-12,97,-96,-73,-62,-74,-104,0,-89,-8,-68,-100,-101,75,-68,106,3,-55,-103,111,34,-103,-83,-80,-85,19,15,5,-105,-29,-108,18,-106,69,-45,-111,47,107,-45,-9,41,-61, 
  /* [31][0][][] */ 59,-25,37,49,11,54,-55,-47,-36,57,-68,-84,45,-104,-34,59,-49,-50,40,74,31,14,-26,63,48,-88,19,33,-53,-17,65,127,68,36,-91,47,71,5,-39,-85,55,-56,-34,30,32,-19,-12,25,78,5,41,-20,-34,-30,-15,41,-78,22,52,67,-47,30,62,8,56,72,-43,-61,103,-97,-106,-10,-62,18,50,6,-34,-37,25,100,-47,-36,17,46,43,66,-78,5,-4,-14,-58,14,-14,68,39,-32, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.002455082256346941, 0.0029162038117647171, 0.0029074379708617926, 0.0021352428011596203, 0.002150190994143486, 0.00210747797973454, 0.002154514892026782, 0.0043135862797498703, 0.0021688793785870075, 0.002163255587220192, 0.0031109589617699385, 0.0021674255840480328, 0.0021367610897868872, 0.0022286609746515751, 0.0022982570808380842, 0.0022143018431961536, 0.0028179788496345282, 0.0022157533094286919, 0.0064440192654728889, 0.0020950315520167351, 0.0021663494408130646, 0.0021903221495449543, 0.0023674862459301949, 0.0020622396841645241, 0.0022589825093746185, 0.0023078715894371271, 0.0021671508438885212, 0.0021239079069346189, 0.0023451515007764101, 0.0020863218232989311, 0.0019630265887826681, 0.0026133107021450996, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2325, 5772, 21315, 2997, -3594, -2341, 23210, 1836, 2760, -3080, 23160, -539, -8674, 3753, 23663, 6856, 11972, 9772, -9107, -6408, 7973, 46163, 24246, 17123, 1050, 1117, 7045, 3830, 1583, -4407, 8853, -3617, -921, 4153, -294, 1468, 10592, 10463, -2451, 9140, 13243, 5073, 5860, 16776, 7196, 9392, 1677, 9508, 8061, -5824, -7260, 168, -507, -1322, 2959, -447, 217, -1549, -3816, 13889, -1262, 1810, -3412, -4062, -5491, 7583, 30861, 1452, -6836, 1081, 1880, 2053, 1802, -2415, 943, 21632, -719, 32753, 21931, -1267, 11366, 2370, -1133, 1457, 25809, 7548, 5045, 606, 6008, 7389, -647, -9856, 1195, -2685, -2760, -3538, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00029381699278019369, 0.00025997322518378496, 0.00010966470290441066, 0.0002876684011425823, 0.00026685409829951823, 0.0006601388449780643, 0.00014256237773224711, 0.00035824804217554629, 0.00018320135131943971, 0.00023107547895051539, 8.5158768342807889e-05, 0.00025290140183642507, 0.00028383953031152487, 0.00073738460196182132, 0.00013053654402028769, 0.00017687844228930771, 0.00014836840273346752, 0.00014718396414536983, 0.00021462359291035682, 0.0002734451845753938, 6.5737374825403094e-05, 5.6593697081552818e-05, 0.0001254067465197295, 8.9265755377709866e-05, 0.00014887284487485886, 0.00033555144909769297, 0.00041493825847283006, 0.0002673644048627466, 0.00029467936838045716, 0.00042121528531424701, 0.00016464671352878213, 0.00021443975856527686, 0.00010749787179520354, 0.00025609569274820387, 0.00033434169017709792, 0.00015655207971576601, 0.0001733320823404938, 0.00010115241457242519, 0.00022775016259402037, 0.00017962325364351273, 9.6004732768051326e-05, 0.00048662672634236515, 0.00026757852174341679, 0.00013721561117563397, 0.0002741285425145179, 0.00010625127470120788, 0.00026550062466412783, 0.00021727864805143327, 0.00014975033991504461, 0.0002336058096261695, 0.00018681224901229143, 0.00021612482669297606, 0.00032212864607572556, 0.00027370557654649019, 0.00027586991200223565, 0.00016592087922617793, 0.00040454880218021572, 0.00027356590726412833, 0.00039873487548902631, 0.000125787133583799, 0.00064741988899186254, 0.00034123312798328698, 0.00014266242214944214, 0.0002005823771469295, 0.0003422565059736371, 0.00024927398771978915, 6.9759720645379275e-05, 0.00017943019338417798, 0.0001746512862155214, 0.00026615214301273227, 0.00019941340724471956, 0.00024795846547931433, 0.00068028253735974431, 0.00020369862613733858, 0.00023897776554804295, 9.5179224445018917e-05, 0.00024415130610577762, 5.5296859500231221e-05, 7.7691853221040219e-05, 0.00022477876336779445, 0.00012139677710365504, 0.00013710545317735523, 0.00015291637100744992, 0.00015919427096378058, 6.8368521169759333e-05, 0.00030717795016244054, 0.00044721947051584721, 0.00022914864530321211, 0.00011232434917474166, 0.00026914442423731089, 0.00021506467601284385, 0.00020178053819108754, 0.00018492878007236868, 0.00040935273864306509, 0.0002417995419818908, 0.00013741965813096613, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -39,127,-5,-102,-77,12,-43,-53,70,-30,-43,74,55,-56,-23,37, 
  /* [1][0][][] */ -4,21,-20,19,9,11,1,-68,64,23,-100,-5,0,24,13,-127, 
  /* [2][0][][] */ -63,1,20,108,77,115,-127,-127,51,11,-39,77,-27,72,-20,-65, 
  /* [3][0][][] */ 11,20,-13,-79,-21,-43,29,7,29,-33,40,11,-8,5,6,127, 
  /* [4][0][][] */ -84,-38,55,61,39,-72,31,74,-64,44,11,-24,-127,55,32,9, 
  /* [5][0][][] */ 10,26,127,6,0,84,-83,20,-24,20,8,-14,9,-25,-95,43, 
  /* [6][0][][] */ 15,-48,64,-127,16,-37,11,101,-67,-62,50,-59,16,26,-3,97, 
  /* [7][0][][] */ 26,51,-28,-34,61,-4,-4,-28,127,37,-21,-7,9,-63,10,18, 
  /* [8][0][][] */ -52,-127,28,-35,55,-13,-3,-95,52,89,68,-2,-16,121,78,26, 
  /* [9][0][][] */ -6,-12,1,127,54,15,3,-68,-50,64,-30,-9,-17,-34,-28,-60, 
  /* [10][0][][] */ -20,12,-7,-106,-51,-39,54,70,-32,-11,127,44,-20,-14,-3,91, 
  /* [11][0][][] */ 10,0,27,-9,46,-56,106,-15,-127,13,-24,2,-9,101,-58,-7, 
  /* [12][0][][] */ 127,-113,79,17,-23,-86,8,81,-13,50,-57,-23,3,11,29,33, 
  /* [13][0][][] */ -11,-9,-33,-16,-2,-127,21,23,12,-22,19,-10,-2,-22,-5,44, 
  /* [14][0][][] */ 17,-61,65,-51,58,-12,-109,-127,-52,-56,6,-12,22,-123,0,-11, 
  /* [15][0][][] */ -44,-2,-30,-49,-4,-24,44,-7,-41,26,127,12,-16,2,29,21, 
  /* [16][0][][] */ -59,14,100,111,-8,59,79,32,-92,36,8,127,-16,56,-14,-49, 
  /* [17][0][][] */ -38,-127,-5,63,-59,18,-112,-28,-105,-24,-17,-15,19,53,63,-73, 
  /* [18][0][][] */ -9,6,-22,104,31,41,-27,-75,127,69,-96,26,40,72,54,18, 
  /* [19][0][][] */ 22,-33,53,43,77,0,-62,7,-38,13,-25,-127,22,10,47,-34, 
  /* [20][0][][] */ 114,-9,-35,-33,2,-109,58,63,-127,-6,-53,13,-51,38,-41,3, 
  /* [21][0][][] */ 70,-9,69,-48,16,-16,-55,18,16,-102,44,30,-29,2,-40,127, 
  /* [22][0][][] */ -14,26,-24,76,-67,-24,127,110,-42,8,9,4,-17,-5,25,32, 
  /* [23][0][][] */ 77,31,127,-39,108,-29,-35,14,91,32,-35,-70,40,-52,-92,20, 
  /* [24][0][][] */ -121,50,12,0,25,127,1,-43,-11,23,65,3,-52,-10,37,-44, 
  /* [25][0][][] */ 47,9,35,24,20,-4,57,-65,23,-127,-25,-39,11,-37,28,46, 
  /* [26][0][][] */ -34,-3,-31,-24,-62,-52,-26,-4,-127,-74,14,-90,17,116,-2,94, 
  /* [27][0][][] */ -19,27,20,77,28,2,-34,-41,71,6,-24,26,7,127,-6,-4, 
  /* [28][0][][] */ 22,21,38,37,113,-38,62,50,-127,-5,-35,-29,-8,61,-1,-35, 
  /* [29][0][][] */ 18,-25,28,11,37,-19,-29,50,-12,34,2,-127,31,-12,36,1, 
  /* [30][0][][] */ -54,65,-45,62,-44,-22,54,-127,-58,44,-12,-14,70,-3,77,84, 
  /* [31][0][][] */ -30,-21,17,-41,17,15,-105,-125,39,67,17,-127,-38,-49,-12,-7, 
  /* [32][0][][] */ -127,-46,6,75,62,55,-35,-20,18,-38,-84,68,51,28,47,48, 
  /* [33][0][][] */ -24,-71,-67,15,-59,17,-49,11,94,36,9,-64,36,-127,76,6, 
  /* [34][0][][] */ -3,25,73,33,81,52,-127,17,-61,21,72,40,38,-51,-46,59, 
  /* [35][0][][] */ -80,-4,-86,11,-24,-34,52,-92,92,107,-40,10,27,-16,96,-127, 
  /* [36][0][][] */ -23,-9,45,127,25,73,46,18,1,-23,73,92,-58,66,-86,-108, 
  /* [37][0][][] */ -9,-9,92,-27,29,58,-112,-92,-127,-10,-43,10,12,-74,81,-91, 
  /* [38][0][][] */ 118,60,-15,-91,127,-17,24,-64,110,83,-60,-16,82,-101,100,94, 
  /* [39][0][][] */ -10,122,45,-127,-2,-20,-66,55,75,-109,-28,-51,15,126,40,56, 
  /* [40][0][][] */ -11,-19,47,-13,23,53,-79,-88,-52,20,-36,0,-6,-80,80,-127, 
  /* [41][0][][] */ -18,-8,-16,-23,24,-22,-40,-62,-11,-3,-68,-9,-127,-20,2,29, 
  /* [42][0][][] */ 107,14,-18,-36,-62,-46,-7,-17,-26,32,127,4,-63,34,71,-53, 
  /* [43][0][][] */ -17,-53,-2,70,70,127,12,-68,61,60,-71,34,-15,-103,-82,-78, 
  /* [44][0][][] */ -8,-21,26,4,22,23,-104,-127,-24,14,17,66,0,-3,39,-70, 
  /* [45][0][][] */ -12,-25,-87,7,56,-19,-24,-127,12,59,-67,-98,1,-9,70,-55, 
  /* [46][0][][] */ -17,-2,-33,-62,-1,45,24,-35,-127,-11,19,45,0,-122,62,-45, 
  /* [47][0][][] */ 24,42,32,-1,127,3,-62,5,-34,42,-1,30,13,30,89,-37, 
  /* [48][0][][] */ -127,-77,5,63,61,49,1,-22,13,-1,-93,74,28,29,28,0, 
  /* [49][0][][] */ 46,75,52,17,124,-67,29,48,-127,-30,-31,-123,-13,7,1,-60, 
  /* [50][0][][] */ 19,-20,18,63,63,-94,-91,-2,19,-3,-2,-127,84,-19,47,-10, 
  /* [51][0][][] */ 21,-13,13,-20,6,-35,6,44,-29,11,-27,-127,-12,-79,-15,43, 
  /* [52][0][][] */ -49,-9,-27,85,63,18,28,35,127,102,-33,26,22,110,46,-24, 
  /* [53][0][][] */ 7,-56,-35,-7,-48,9,-67,-11,90,26,18,-36,12,-127,87,10, 
  /* [54][0][][] */ 43,-18,-55,45,59,116,-127,-38,-34,-53,-6,43,-28,33,-22,-63, 
  /* [55][0][][] */ 33,-57,17,26,72,-33,-90,-127,-30,-39,-95,-87,33,-38,39,-46, 
  /* [56][0][][] */ 12,33,66,-35,6,-15,-91,59,6,127,26,29,12,9,-56,29, 
  /* [57][0][][] */ -44,-44,-12,39,-29,19,102,98,-102,52,37,15,-46,34,127,-7, 
  /* [58][0][][] */ 0,2,-127,-5,61,52,-7,28,-46,9,-14,-13,-10,-33,-4,-10, 
  /* [59][0][][] */ -103,86,127,42,-43,-37,95,116,33,5,19,-14,-1,50,63,-18, 
  /* [60][0][][] */ 40,-19,-16,-5,42,-127,-12,-17,34,-21,-30,-79,-10,-53,3,-1, 
  /* [61][0][][] */ 50,-22,26,127,106,-1,35,22,-103,15,2,24,-32,7,-10,-64, 
  /* [62][0][][] */ -102,114,29,-23,4,8,-118,4,-25,-41,-77,-88,-9,-127,-40,-76, 
  /* [63][0][][] */ -118,32,-119,127,-79,64,-107,-88,-66,-37,-27,-9,-1,25,34,14, 
  /* [64][0][][] */ -2,54,3,49,-22,4,-53,63,127,-10,55,-86,-13,-93,122,39, 
  /* [65][0][][] */ -2,5,4,-127,17,-56,74,0,-20,16,1,-96,-14,-26,8,-11, 
  /* [66][0][][] */ 127,-39,67,-3,21,15,-36,44,54,-36,27,46,-34,86,-18,35, 
  /* [67][0][][] */ -22,59,-20,-115,17,12,-92,23,98,-127,-59,-55,16,59,55,12, 
  /* [68][0][][] */ -68,30,127,26,51,3,-40,-23,-37,-5,-67,-82,72,-43,123,-41, 
  /* [69][0][][] */ 127,94,-30,-28,-78,-57,17,18,3,-29,43,-99,-20,24,54,-27, 
  /* [70][0][][] */ 8,2,-36,-21,-28,13,82,127,-43,49,-18,3,-15,51,-6,31, 
  /* [71][0][][] */ 8,-49,-18,-10,20,-55,-15,12,-16,28,-55,12,-127,3,30,42, 
  /* [72][0][][] */ -10,52,-92,57,31,41,-12,127,-10,-45,21,-33,83,32,23,-6, 
  /* [73][0][][] */ -47,-34,34,15,51,-45,-82,-127,15,-68,15,-78,36,-54,41,-17, 
  /* [74][0][][] */ 31,21,33,127,12,61,-99,33,-40,-40,-81,84,5,-73,8,-86, 
  /* [75][0][][] */ 45,-28,-22,50,63,82,-65,-79,127,90,-97,-27,44,22,-66,-51, 
  /* [76][0][][] */ 4,-47,6,25,13,0,-24,45,28,-48,-4,-127,-19,2,1,2, 
  /* [77][0][][] */ -47,-74,-33,127,-39,94,41,99,97,88,-113,20,31,-11,-64,-105, 
  /* [78][0][][] */ -83,-37,56,-26,78,19,-12,23,33,2,29,32,-7,127,-21,-57, 
  /* [79][0][][] */ -36,-61,-36,-22,-40,18,20,-43,127,37,33,66,-12,15,7,-49, 
  /* [80][0][][] */ 60,-8,127,-44,60,27,-53,-118,31,43,-74,-29,-20,-14,22,-58, 
  /* [81][0][][] */ -14,30,-99,1,43,-127,4,71,-12,-41,49,-30,24,-25,7,31, 
  /* [82][0][][] */ 116,-14,0,-23,10,-127,-19,1,-28,-32,-122,-40,98,-47,-25,48, 
  /* [83][0][][] */ 56,52,-83,-127,-40,-51,13,-96,83,23,-62,-105,23,-33,31,111, 
  /* [84][0][][] */ -90,16,84,16,35,26,3,-127,-28,69,3,-4,11,88,21,-58, 
  /* [85][0][][] */ -100,127,37,-74,-36,3,-44,-36,-16,-10,-81,38,1,26,-84,-47, 
  /* [86][0][][] */ -5,54,-20,8,-18,-30,127,40,15,-24,-6,-5,15,41,52,-6, 
  /* [87][0][][] */ -18,-37,3,-78,38,-10,14,-23,10,12,-16,-127,-24,-18,6,-30, 
  /* [88][0][][] */ 90,-79,-8,-69,17,-99,-18,-51,45,23,-127,9,0,-60,82,41, 
  /* [89][0][][] */ 7,-47,-8,-15,45,20,-58,-44,-36,34,29,-12,127,13,17,-64, 
  /* [90][0][][] */ 11,-69,-3,-108,86,-14,-73,127,51,-110,-65,-58,-1,111,-16,-125, 
  /* [91][0][][] */ -15,-1,-127,4,15,22,-50,-65,25,20,-8,2,-13,-32,19,-33, 
  /* [92][0][][] */ -13,18,26,-1,-14,-127,33,18,-3,-34,2,-23,0,-22,21,23, 
  /* [93][0][][] */ 12,-9,127,10,-33,69,5,-38,6,47,-54,-3,-31,16,21,-22, 
  /* [94][0][][] */ 42,-23,-10,-10,39,-26,-35,35,-5,-4,3,-127,118,-17,46,-35, 
  /* [95][0][][] */ 62,127,10,48,-68,9,-26,79,-70,-30,109,8,-81,47,27,-55, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00085738790221512318, 0.00075862830271944404, 0.00032001276849769056, 0.00083944568177685142, 0.00077870744280517101, 0.0019263523863628507, 0.00041601152042858303, 0.0010454042349010706, 0.00053460017079487443, 0.00067430175840854645, 0.00024850195040926337, 0.00073799205711111426, 0.00082827266305685043, 0.0021517632994800806, 0.00038091890746727586, 0.00051614927360787988, 0.00043295411160215735, 0.00042949776980094612, 0.00062629347667098045, 0.00079794088378548622, 0.00019182833784725517, 0.00016514616436325014, 0.00036594964331015944, 0.00026048655854538083, 0.00043442609603516757, 0.00097917323000729084, 0.0012108320370316505, 0.00078019651118665934, 0.00085990439401939511, 0.0012291490565985441, 0.00048045587027445436, 0.00062575703486800194, 0.00031368972850032151, 0.00074731331551447511, 0.00097564305178821087, 0.00045683488133363426, 0.00050580064998939633, 0.00029517302755266428, 0.00066459813388064504, 0.00052415893878787756, 0.00028015158022753894, 0.0014200262958183885, 0.00078082137042656541, 0.00040040913154371083, 0.00079993496183305979, 0.00031005204073153436, 0.00077475787838920951, 0.00063404120737686753, 0.00043698670924641192, 0.00068168551661074162, 0.00054513715440407395, 0.00063067424343898892, 0.00094000418903306127, 0.00079870072659105062, 0.00080501649063080549, 0.00048417400103062391, 0.001180514576844871, 0.00079829315654933453, 0.0011635489063337445, 0.00036705966340377927, 0.001889237086288631, 0.00099575298372656107, 0.00041630346095189452, 0.00058531976537778974, 0.0009987392695620656, 0.00072740687755867839, 0.00020356595632620156, 0.00052359554683789611, 0.0005096502136439085, 0.00077665899880230427, 0.00058190862182527781, 0.0007235680241137743, 0.0019851336255669594, 0.00059441331541165709, 0.00069736142177134752, 0.00027774265618063509, 0.00071245833532884717, 0.00016136186604853719, 0.00022671274200547487, 0.00065592728788033128, 0.00035424815723672509, 0.00040008765063248575, 0.00044622551649808884, 0.00046454509720206261, 0.00019950629211962223, 0.000896376499440521, 0.0013050319394096732, 0.00066867907298728824, 0.00032777388696558774, 0.00078539078822359443, 0.00062758062267675996, 0.00058881612494587898, 0.00053964101243764162, 0.0011945329606533051, 0.00070559565210714936, 0.00040100453770719469, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -22138, -4041, 4293, 7550, 17103, 16471, 14189, -31810, -27034, 25613, 25136, 17532, -20034, 14936, 2054, -14392, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0004198715032543987, 0.00039251320413313806, 0.0001768726360751316, 0.00025625477428548038, 0.00031573782325722277, 0.0002162119053537026, 0.00035567473969422281, 0.00028433019178919494, 0.00032334116986021399, 0.00019388311193324625, 0.00043198696221224964, 0.00041639909613877535, 0.00033740847720764577, 0.0002226201759185642, 0.00031041717738844454, 0.00033582770265638828, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -15,-39,-23,-74,11,-56,-71,-23,19,61,-22,-13,-30,-20,-7,-20,-16,4,13,-5,-14,-19,18,18,-23,14,-31,127,2,-52,23,-27,-7,12,13,47,-7,40,-41,-15,-3,-11,-9,44,15,-77,-1,20,19,-4,13,-41,3,-8,-17,97,99,-18,-38,-33,33,10,22,-14,-46,-72,-24,13,27,10,-19,10,12,18,-2,-10,30,-11,-1,10,-43,-34,-2,32,4,-32,-72,-89,-24,-11,39,9,68,-87,-8,-10, 
  /* [1][0][][] */ 81,-40,-82,-62,82,-43,78,-29,41,-15,-49,-89,39,-81,-69,24,-18,-2,-23,110,9,25,-58,-31,62,-53,-40,-29,11,-50,-65,23,-30,11,5,-20,-12,-103,-17,-10,-24,26,1,-13,4,-56,0,32,-14,-127,68,-89,23,24,18,73,-11,-39,10,-8,-49,-83,-37,-19,2,38,-70,-41,-29,-15,-92,-68,46,-98,-13,-49,47,-14,31,-31,-29,3,-53,-29,-34,38,-90,49,8,-18,48,102,19,-59,19,104, 
  /* [2][0][][] */ 10,57,-40,32,17,27,-6,22,-9,-124,-27,33,52,31,22,9,41,7,-49,-12,40,-24,70,7,8,49,19,-54,2,-57,-36,-65,-10,35,-60,-6,-127,-9,55,-9,-34,-36,-11,-22,-32,47,-13,52,-56,-9,-14,-4,66,-66,-13,36,-17,-5,-3,-33,6,66,27,-2,24,-34,21,-10,-29,32,27,-1,-4,-71,-24,21,15,11,-11,4,52,-52,0,29,34,41,23,-11,-45,34,-50,-53,22,-16,-50,24, 
  /* [3][0][][] */ -2,15,66,36,-12,-11,3,42,-1,-81,32,65,-5,45,-4,54,-16,13,10,-22,94,-59,14,11,32,11,12,5,29,27,12,30,-32,7,3,-27,-33,22,3,22,-62,-4,19,-6,27,86,-32,-48,-31,3,-55,43,-11,-73,-37,-17,-56,4,1,3,12,104,-14,-21,42,36,47,-30,-2,63,63,-9,33,-34,19,-18,-44,10,-2,31,37,-75,12,21,-1,5,26,-3,39,8,-3,-6,47,127,40,-14, 
  /* [4][0][][] */ -58,39,5,76,42,-13,9,12,-68,-70,-49,31,-68,98,7,36,-6,-84,18,-46,-21,-37,5,-46,72,16,14,19,12,31,23,-9,74,-26,-6,40,23,22,11,52,-127,55,-35,-38,13,7,-44,18,65,63,-92,13,-7,-62,-33,-94,36,-7,-13,18,41,55,31,-17,-19,25,-21,-16,-55,-9,9,40,-11,-54,-20,-19,-27,60,44,6,11,-51,2,-23,-79,-8,20,30,37,42,-24,-42,41,21,28,-54, 
  /* [5][0][][] */ -38,-8,19,30,-20,0,52,43,-39,-63,43,99,20,81,23,-19,-45,-46,-6,-31,67,-57,-53,42,5,-11,36,-76,24,58,5,46,-25,-1,8,-88,13,60,-3,15,-57,27,22,-24,-32,127,14,-58,2,24,-30,25,15,-10,-25,-113,-2,7,-27,-6,53,63,3,45,-9,76,35,76,7,122,73,7,28,-4,-16,46,-86,18,-21,46,41,-38,43,13,44,38,35,115,24,36,-56,-30,28,93,-14,38, 
  /* [6][0][][] */ 55,-28,-15,-74,32,37,43,25,32,-30,-31,-127,-1,-71,-15,37,55,17,-49,68,-45,60,9,25,-34,35,1,-41,-35,17,64,-12,39,40,12,18,29,-50,-16,-69,70,51,-30,15,58,-113,-15,38,-14,3,55,51,-27,-79,1,13,-2,-50,23,48,-50,46,26,-53,53,-29,22,-8,12,14,68,-34,-86,-41,-29,39,-39,-10,39,-34,-44,69,10,-28,-82,-8,33,-26,13,-7,38,-16,-58,-88,-11,13, 
  /* [7][0][][] */ 38,97,-24,-41,104,21,6,-40,-9,-29,14,-89,-15,-71,17,24,77,15,-5,42,-4,56,32,20,-33,53,18,-31,-5,-26,40,-23,39,18,-38,41,56,-33,-49,18,48,18,-10,59,-19,-127,19,0,-25,-27,65,-18,11,-58,-11,35,17,-10,-14,23,-22,-35,21,-19,1,33,3,-46,-18,-40,-21,33,-51,-61,2,54,74,36,40,-29,-86,-5,-9,33,-43,11,-49,-37,-27,-9,40,-1,-70,-126,31,2, 
  /* [8][0][][] */ 17,2,73,-1,-102,-56,7,-38,69,111,55,10,-23,27,7,21,-57,10,34,-25,-28,0,-127,31,41,-38,9,36,-2,-20,-66,25,12,1,38,38,-23,58,52,15,6,-55,58,-62,-56,8,63,16,-62,-5,-17,-55,-35,26,-29,40,60,-7,-73,-25,50,-26,-15,15,-34,84,-46,-71,23,-14,-81,-30,85,113,64,-4,36,-49,-9,48,-69,-15,-59,-8,35,48,39,106,4,-20,96,37,70,51,33,-14, 
  /* [9][0][][] */ -34,-14,-50,52,35,81,-14,1,-6,-82,87,119,56,96,13,-28,-77,-43,-43,-34,0,-83,11,-43,13,21,66,24,28,14,-59,-7,12,-26,-96,-10,-60,22,2,56,-18,-41,-2,19,6,110,-45,-46,12,31,-101,-11,8,10,-2,-112,-34,87,-20,-30,53,63,-49,65,-90,13,63,-4,-34,25,26,-74,-14,9,8,-36,-31,-31,-14,44,60,-25,-10,18,40,-52,127,-10,-7,-30,-75,-34,20,105,-7,-83, 
  /* [10][0][][] */ -16,-25,7,-6,-9,38,45,-11,36,-40,30,26,77,-7,-6,52,14,35,-51,-11,16,-2,29,37,-9,22,110,-127,0,-55,61,-46,-22,65,6,-3,0,33,43,-27,27,-63,7,-8,-7,44,42,14,-21,-9,-16,1,2,-10,-5,-58,-53,28,-17,-22,-2,65,34,23,-17,69,17,-30,-5,5,98,-4,-24,8,1,122,0,21,1,15,-7,-8,12,39,12,-16,56,87,-21,-20,-3,-19,17,-11,53,-57, 
  /* [11][0][][] */ -58,33,59,56,-10,11,-14,57,-6,-78,40,52,90,85,-1,-27,17,19,-94,-34,57,-89,-17,-8,24,-30,127,9,-24,41,-32,41,-50,61,-17,-11,-24,34,63,-2,-35,4,-11,24,61,116,73,-11,30,44,-2,55,26,-28,13,-39,-120,-2,-45,-6,-20,104,-49,51,13,-10,4,3,0,89,50,-4,-1,17,-15,-50,-84,54,-96,64,25,-17,-23,-100,111,45,88,-10,36,28,-61,-112,-2,86,16,-20, 
  /* [12][0][][] */ -2,-5,-84,-48,41,6,4,-35,-16,86,40,-14,-29,-9,56,-2,-15,-35,27,-25,-7,19,-46,8,-9,-8,-46,77,-11,34,-57,24,8,20,33,9,-33,-10,-30,26,26,8,19,-1,3,-57,10,14,-2,21,-2,-40,-24,28,11,1,36,-1,26,-3,28,-53,1,12,16,-25,-17,42,-1,-127,-75,24,4,13,29,56,22,-9,14,-6,-17,18,-17,5,18,-34,-23,0,4,40,27,14,-7,2,-16,24, 
  /* [13][0][][] */ -24,33,20,-18,-3,69,-9,71,3,-64,9,-9,108,-6,32,6,25,23,-94,23,32,11,76,-9,-5,70,-3,-40,-20,13,53,-66,-89,40,-6,7,12,-11,3,-11,19,127,-60,70,60,-27,-25,2,37,-14,97,91,56,-105,51,-2,-42,30,18,44,-74,80,-24,16,67,-34,34,22,27,60,22,-70,-21,-53,-89,28,25,27,-31,-25,37,-13,39,-25,3,-32,43,-70,13,2,-113,-4,-18,-114,-6,45, 
  /* [14][0][][] */ -19,8,-87,-95,94,5,-3,-15,-73,33,-17,-27,-51,-79,-104,3,-126,-2,80,54,-16,75,21,-105,-3,49,-76,-44,3,-3,-5,-22,-25,-49,1,-18,-42,-37,-46,-11,98,54,-69,-16,9,-119,-6,24,112,-59,8,18,-12,10,-100,48,-13,-5,-84,0,-24,-5,30,-10,41,26,3,-4,-75,-4,-9,24,14,-25,-19,81,60,-93,-59,-101,-37,-20,2,85,-20,-127,-33,14,-40,5,47,63,-31,28,-45,18, 
  /* [15][0][][] */ 34,-59,-2,-29,14,-1,-17,-96,3,45,-5,-107,30,-54,32,13,-17,6,1,50,-15,94,-47,-8,-15,0,-26,5,-54,-19,48,-73,-3,53,44,27,6,-6,-52,-9,74,-94,0,53,-8,-109,32,46,29,-17,30,-127,8,46,-2,67,54,15,-16,50,-7,-38,28,14,-15,-9,-10,4,1,10,-5,36,-25,24,-3,-24,15,-20,34,-47,-49,50,-22,58,-5,-39,-52,-19,-45,49,67,68,-32,-54,8,-15, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.017844539135694504, 0.016681810840964317, 0.0075170868076384068, 0.010890827514231205, 0.013418857008218765, 0.0091890059411525726, 0.015116175636649132, 0.012084032408893108, 0.013741999864578247, 0.008240032009780407, 0.018359445035457611, 0.017696961760520935, 0.01433985959738493, 0.0094613572582602501, 0.013192730024456978, 0.014272676780819893, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 29088, 65978, -3907, -3859, 15199, -6352, 4668, -2313, 6241, 7613, 5683, -1839, -743, 1659, 3727, -17734, -5023, 2345, -3489, 9875, -8573, 24427, -7751, 11134, 5925, 383, -292, 14708, 6919, -18170, -1225, 21118, 17178, -11703, 3081, 356, -476, -534, 4844, -19748, -2522, -1838, -8145, -432, 29295, 505, 6661, -1191, -15087, 2710, -659, 7511, -2678, 10123, -7421, 16748, 25925, 1468, 31341, 1322, -10049, -778, 4234, -258, -1856, 19798, -269, -4810, 673, 1224, 518, -6678, 4502, -307, -6156, -5131, 1540, -4204, 30765, -7746, -5724, -10524, -974, -2056, 49353, -12480, -8144, -27324, -5262, 8454, -890, 19374, -526, 39, -2220, -679, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 7.9915385867934674e-05, 9.5037612481974065e-05, 0.00014159487909637392, 0.00024941810988821089, 0.0002178737340727821, 0.00013112090528011322, 3.4639291698113084e-05, 0.00011382383672753349, 0.00031288093305192888, 0.00033193870331160724, 0.00019091206195298582, 0.00018450275820214301, 0.00033085502218455076, 0.00026024851831607521, 0.0003768420428968966, 7.0161586336325854e-05, 0.00020888536528218538, 0.00015988312952686101, 0.00023326902010012418, 0.00010360273881815374, 8.6918182205408812e-05, 7.0719375798944384e-05, 0.00015653367154300213, 7.5386233220342547e-05, 9.8878801509272307e-05, 0.00014051115431357175, 0.00025573273887857795, 0.000207509845495224, 7.2789072874002159e-05, 0.00047254006494767964, 0.00039364179247058928, 0.00014682082110084593, 8.5546591435559094e-05, 0.00013372402463573962, 0.00017475723871029913, 0.00046075266436673701, 0.00045493044308386743, 0.00025463278871029615, 0.00026014618924818933, 3.8172645872691646e-05, 0.00021046937035862356, 0.00025667762383818626, 0.00031723678694106638, 0.0004745486075989902, 0.00030886032618582249, 0.00013710028724744916, 0.00012090856034774333, 0.00024805337307043374, 0.00051970093045383692, 0.00012343242997303605, 0.00038752600084990263, 0.00015630590496584773, 0.00023420961224474013, 0.00023248787329066545, 0.00011109081242466345, 0.00016108699492178857, 0.00011241677566431463, 0.00043368292972445488, 3.0972612876212224e-05, 0.00015853233344387263, 0.00030518675339408219, 0.00046500118332915008, 0.00011979331611655653, 0.00016226788284257054, 0.00013750143989454955, 0.00010228516475763172, 0.00028020743047818542, 0.00046908570220693946, 0.00022826628992334008, 0.00017176181427203119, 0.00028302226564846933, 8.3083592471666634e-05, 0.00030829739989712834, 0.00021779470262117684, 0.00013233782374300063, 0.00039550635847263038, 0.00012651251745410264, 7.0500806032214314e-05, 7.7863820479251444e-05, 0.00017886882415041327, 0.00022586615523323417, 0.00020387681433930993, 0.00018038063717540354, 0.00026770151453092694, 6.1108366935513914e-05, 0.00011108915350632742, 8.1628932093735784e-05, 0.00047483900561928749, 0.00031380611471831799, 9.6451251010876149e-05, 0.0005029129097238183, 5.7847519201459363e-05, 0.00015629659174010158, 0.00014363737136591226, 0.00026800393243320286, 0.0003563392092473805, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -38,-75,-15,127,25,93,96,-77,-14,-32,-26,11,-24,-14,40,5,-5,-61,31,18,28,-90,127,2,-67,13,62,-33,-114,-127,41,24,17,44,57,-15,-34,-8,30,31,-17,30,-110,74,24,-94,53,53,-20,56,-15,7,2,-2,34,51,-68,-51,-48,-26,-7,-15,3,40,77,-34,104,23,-2,17,21,127,14,28,38,-2,-19,28,127,-24,-21,31,-29,26,110,27,-90,-17,-2,-36,-23,-33,-6,-37,-22,27, 127,-127,78,84,-41,127,38,-127,59,5,-27,127,127,-94,-17,3,14,127,127,-106,127,-74,71,55,-127,-127,-55,-31,-56,43,-61,-17,-74,70,-127,-77,-48,-25,-71,116,-16,127,127,79,-49,-127,-98,-45,-15,-127,45,74,76,-20,58,83,-33,31,-86,-120,-38,-45,-64,65,80,-69,28,33,-78,33,-21,88,106,127,33,14,-2,80,-24,52,68,123,127,-26,-4,105,-111,127,-114,-110,0,-127,-98,-127,-41,114, -71,-13,40,-77,16,-27,92,-12,70,-45,-45,30,1,-8,-10,-4,-9,-24,18,-10,-17,-82,38,-2,-75,95,5,-54,127,43,-12,10,-6,25,11,-37,-9,30,15,43,8,16,-118,56,14,-34,53,7,-15,23,2,-13,-16,6,3,40,-63,-1,-28,53,10,43,15,10,-6,-46,-48,17,4,-7,-7,53,6,-25,8,9,-21,-3,-65,2,-23,-37,-21,6,-103,18,-21,-22,-57,26,-37,-47,32,-23,-17,11, 
  /* [0][1][][] */ -68,-78,66,-13,-44,119,10,111,-46,-19,-12,-93,25,-97,80,50,9,-61,-11,89,46,-42,45,46,-64,9,127,-21,-10,62,122,-105,-127,94,-83,-52,-33,40,-17,127,-58,-27,-7,41,-49,109,-11,65,14,91,37,-10,1,-52,44,27,127,116,-48,-89,127,-39,-39,127,75,-41,-8,-3,121,39,127,99,-48,97,-12,14,6,18,-19,10,-54,127,-87,111,3,34,-64,29,88,-127,-34,25,127,-69,-30,-1, 64,122,58,-82,127,100,69,32,-127,127,127,-24,-58,-109,-127,127,127,-81,-127,-42,78,127,-121,127,-97,-73,-38,127,-126,108,-127,-127,-91,127,107,127,127,-127,-104,119,-78,-100,110,-127,-127,-36,-127,-127,127,-125,90,31,127,127,127,-127,95,-127,-127,127,12,-72,-127,-98,-127,127,-127,127,-127,-127,-109,-88,-127,-81,127,127,-127,127,-63,127,127,31,-43,-127,48,127,92,50,127,12,127,50,-76,32,127,-127, -62,-16,-36,25,-53,-117,24,-16,15,-28,-48,88,16,104,15,23,-3,55,7,127,-17,-98,-31,14,-37,99,-76,-19,-67,-20,21,-67,-69,43,5,-20,-26,48,-68,68,127,-4,-34,18,-51,-54,23,40,4,123,5,-11,-38,-74,8,21,92,1,-1,12,-35,127,68,-45,-43,11,27,-12,-85,123,-23,-93,0,-58,-11,4,26,19,77,-31,-73,-55,60,16,-42,-22,75,22,8,67,-42,48,-44,91,-30,-6, 
  /* [0][2][][] */ -76,-5,-8,-17,11,-61,51,30,54,-30,-41,-20,14,27,-24,20,-2,53,12,17,-63,-102,17,3,29,-83,25,-71,122,40,36,16,18,-14,-9,-52,-14,35,5,6,-23,-2,-74,107,7,43,9,31,-15,-29,-1,-28,14,1,8,0,-54,28,-19,14,20,4,-22,-14,-2,-47,-64,10,-41,10,32,26,4,-18,22,-15,15,5,-75,-8,-9,-8,32,22,-127,-18,18,-44,-64,-44,-22,-59,16,58,-29,-8, 97,28,-127,-36,-71,-39,24,33,-62,-29,-30,-117,-74,127,-12,55,7,-69,-4,-111,68,-102,-24,3,-36,108,-70,24,-10,-20,-3,-22,-52,10,14,10,-32,-29,127,71,5,-9,57,-47,-35,96,-61,-50,-33,-6,-127,-127,-57,-19,4,39,-58,-12,-4,35,-6,-11,-1,-53,-56,32,52,-20,103,112,-22,-71,6,-55,4,-13,93,1,48,26,14,-87,-51,12,-11,-10,127,39,-72,37,-12,-124,62,80,-15,26, -75,12,-10,11,14,-96,-127,19,-11,-19,-33,-6,27,-15,21,18,-5,-37,15,22,-39,-116,35,6,38,-107,4,1,-37,-39,3,7,46,-19,-11,-29,-36,5,43,-25,42,1,-47,-42,2,66,24,20,-11,-6,22,-28,14,1,-6,-9,-57,-16,-1,-53,-12,14,65,-11,30,-5,-24,28,-1,16,-3,26,-21,23,13,8,34,3,79,2,12,-14,-5,-8,52,-11,58,-38,48,37,-14,-49,9,12,-19,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0033964037429541349, 0.0040390985086560249, 0.0060177822597324848, 0.01060026977211237, 0.0092596337199211121, 0.0055726384744048119, 0.0014721698826178908, 0.0048375129699707031, 0.013297439552843571, 0.014107394032180309, 0.0081137623637914658, 0.0078413672745227814, 0.014061338268220425, 0.011060561984777451, 0.016015786677598953, 0.0029818674083799124, 0.0088776275515556335, 0.0067950328812003136, 0.0099139334633946419, 0.0044031161814928055, 0.0036940225400030613, 0.0030055735260248184, 0.006652680691331625, 0.0032039147336035967, 0.0042023491114377975, 0.0059717237018048763, 0.010868641547858715, 0.00881916843354702, 0.0030935355462133884, 0.020082952454686165, 0.016729775816202164, 0.0062398849986493587, 0.0036357301287353039, 0.0056832712143659592, 0.0074271825142204762, 0.019581988453865051, 0.019334543496370316, 0.010821893811225891, 0.011056212708353996, 0.001622337382286787, 0.0089449482038617134, 0.01090879924595356, 0.013482563197612762, 0.02016831561923027, 0.013126564212143421, 0.0058267619460821152, 0.0051386137492954731, 0.010542267933487892, 0.022087289020419121, 0.0052458778955042362, 0.016469854861497879, 0.006643000990152359, 0.0099539086222648621, 0.0098807346075773239, 0.0047213593497872353, 0.0068461969494819641, 0.0047777127474546432, 0.018431523814797401, 0.0013163359835743904, 0.0067376242950558662, 0.012970436364412308, 0.019762549549341202, 0.0050912159495055676, 0.0068963849917054176, 0.0058438112027943134, 0.0043471194803714752, 0.011908816173672676, 0.019936142489314079, 0.0097013171762228012, 0.0072998767718672752, 0.012028445489704609, 0.0035310524981468916, 0.013102639466524124, 0.009256274439394474, 0.0056243576109409332, 0.016809020191431046, 0.005376781802624464, 0.0029962840490043163, 0.0033092121593654156, 0.0076019251719117165, 0.0095993112772703171, 0.0086647644639015198, 0.0076661771163344383, 0.011377314105629921, 0.0025971056893467903, 0.0047212890349328518, 0.0034692294429987669, 0.020180657505989075, 0.013336759991943836, 0.0040991781279444695, 0.021373797208070755, 0.0024585195351392031, 0.0066426047123968601, 0.0061045880429446697, 0.011390166357159615, 0.015144416131079197, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 2810, 17151, 18255, 26869, 18616, -5475, -3507, 23468, 27467, -11223, 9542, 8572, 9856, 24584, 37236, 6082, 2675, 6216, 14747, 4457, -918, 2471, 23151, -3005, 4630, -652, 21790, 8971, 9024, 98531, 64567, 11422, 3799, -2263, 13692, 2869, 3666, 16897, 27489, -2424, 8015, 11090, 165905, -13062, 45941, 8405, 10124, 24982, 93697, 22816, -1348, 6328, -5713, -82, -5117, 6361, -1546, 16175, 11507, 8731, 4561, 19912, 14439, 9040, 13057, 11617, 11951, -9428, 12666, -3509, 13427, 13458, 18453, 7357, -8349, -11217, 4338, -14, 1595, -5160, 32588, 8487, 4046, 11636, 2972, 370, 10132, 130182, 19596, 16618, 9422, -588, 7299, 9186, 9367, 28688, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00015313996118493378, 0.00010590739111648872, 9.9052362202201039e-05, 7.7007418440189213e-05, 0.00015810255717951804, 0.00017537383246235549, 0.00029129526228643954, 7.7295044320635498e-05, 8.2036829553544521e-05, 0.00012901207082904875, 0.00027721683727577329, 0.00010299545829184353, 0.00011191522935405374, 0.00010179275705013424, 6.4978019508998841e-05, 0.00012887129560112953, 0.00013517358456738293, 0.00018814651411958039, 0.00014487793669104576, 0.00024694800958968699, 0.00018399549298919737, 0.00024381533148698509, 8.6338273831643164e-05, 0.00025261010159738362, 0.00048707224777899683, 0.00018481453298591077, 9.4548646302428097e-05, 0.00014280181494541466, 0.00014915219799149781, 3.6022545828018337e-05, 4.3973341234959662e-05, 0.00019599020015448332, 0.00025880959583446383, 0.00013682998542208225, 0.00014605294563807547, 0.00015540873573627323, 0.00012163733481429517, 9.4074755907058716e-05, 9.7232026746496558e-05, 0.00018867483595386147, 0.00021957623539492488, 0.00013345383922569454, 1.7202064555021934e-05, 9.8514261480886489e-05, 6.9495472416747361e-05, 0.00014345078670885414, 0.00016383806359954178, 0.00011165314936079085, 4.3961546907667071e-05, 0.00010847899102373049, 0.00010897559695877135, 0.00023512249754276127, 0.00023593049263581634, 0.00027793424669653177, 0.00017471537285018712, 0.00016044512449298054, 0.00026347182574681938, 0.00011188689677510411, 0.00017940127872861922, 0.00017329408728983253, 0.00033507574698887765, 5.4917520174058154e-05, 0.00011261273175477982, 0.00011181315494468436, 0.00019816795247606933, 0.00017498897796031088, 9.6920273790601641e-05, 0.00013319775462150574, 0.00013814662816002965, 0.00012695227633230388, 8.0574041930958629e-05, 0.00012421557039488107, 0.00011220798478461802, 0.00015890573558863252, 0.00017370803107041866, 0.00015069531218614429, 0.00041513133328408003, 0.00016543993842788041, 0.00030294127645902336, 0.00010251726780552417, 6.1987120716366917e-05, 0.00017046048014890403, 0.00011232345423195511, 0.00015369044558610767, 0.00044592664926312864, 0.00015677401097491384, 0.00018267714767716825, 2.8948732506250963e-05, 7.5858013588003814e-05, 0.00013010048132855445, 0.00013682397548109293, 0.00043194543104618788, 0.0001817130105337128, 0.00013016660523135215, 0.00014843518147245049, 6.4694693719502538e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -8,66,-4,60,29,36,-17,-42,120,3,-31,127,51,-63,110,-34, 
  /* [1][0][][] */ -13,94,-21,9,3,-62,103,-127,19,88,-58,-42,24,-20,95,24, 
  /* [2][0][][] */ -105,-9,-104,23,-9,-8,-36,-8,43,36,-38,-26,25,-39,-3,-127, 
  /* [3][0][][] */ 49,-27,-11,12,-78,-25,127,106,-50,20,25,5,-1,37,-113,8, 
  /* [4][0][][] */ -22,41,18,71,0,127,-57,-92,83,-58,8,-24,-1,-66,-71,-18, 
  /* [5][0][][] */ 5,-70,44,10,-42,-4,-31,33,23,61,-127,-92,72,112,-61,-41, 
  /* [6][0][][] */ 83,-62,-25,-36,-50,30,14,-5,13,70,-19,81,127,23,15,-20, 
  /* [7][0][][] */ -81,78,105,127,77,22,32,-41,-64,14,-69,-70,26,-18,6,-38, 
  /* [8][0][][] */ 48,127,72,1,-1,-20,6,23,42,-10,68,-17,-60,-15,-53,0, 
  /* [9][0][][] */ 92,-76,43,19,-127,-23,94,105,-2,-6,51,87,-35,12,-100,78, 
  /* [10][0][][] */ 29,-101,-43,-61,-9,-24,-8,81,79,59,-18,-127,-55,53,1,6, 
  /* [11][0][][] */ 86,-109,-31,-121,-127,-35,43,3,-88,-33,7,43,44,46,-44,40, 
  /* [12][0][][] */ -40,-106,10,-5,8,-5,-127,-44,51,-9,-87,-37,-26,116,22,-37, 
  /* [13][0][][] */ -40,47,-21,12,100,-60,-10,-37,127,53,-64,61,-38,-21,65,-62, 
  /* [14][0][][] */ 30,-121,1,6,-2,1,117,127,48,53,-25,-36,10,-9,-31,34, 
  /* [15][0][][] */ 24,-13,-6,53,-42,-43,127,29,-45,-99,48,4,-13,9,14,32, 
  /* [16][0][][] */ -44,-69,-90,33,32,40,12,-64,-5,98,85,6,59,86,127,79, 
  /* [17][0][][] */ 7,-8,36,72,90,-22,-12,-41,127,-23,-26,-35,22,-12,-41,4, 
  /* [18][0][][] */ -9,25,-29,24,-127,-22,68,49,-59,-5,-14,-23,-24,-73,-3,16, 
  /* [19][0][][] */ 110,-83,-23,45,84,29,-64,39,47,-35,52,15,-17,64,-127,95, 
  /* [20][0][][] */ 20,-6,24,-30,17,39,-84,36,-60,-44,127,3,5,-2,-72,117, 
  /* [21][0][][] */ -74,14,66,-5,13,54,-70,7,58,92,-74,69,-127,11,0,-106, 
  /* [22][0][][] */ -2,23,-1,-127,77,-46,66,7,-111,-103,49,-89,-14,18,59,43, 
  /* [23][0][][] */ -52,20,59,-9,14,27,-13,-10,-31,-4,28,-1,127,30,6,-29, 
  /* [24][0][][] */ -81,-59,-45,-36,-6,46,4,-75,-100,9,31,-30,18,-127,-26,-10, 
  /* [25][0][][] */ -127,41,113,-81,58,-114,-1,-114,-60,125,-5,97,14,-105,47,45, 
  /* [26][0][][] */ 99,-50,-70,-64,31,-36,86,64,8,6,-3,46,-127,60,-101,9, 
  /* [27][0][][] */ 127,-35,25,-54,-10,-27,0,-6,-50,-17,-70,64,2,30,-10,37, 
  /* [28][0][][] */ -127,-4,-90,-1,21,67,-19,-119,96,-11,-114,-114,18,2,-15,-25, 
  /* [29][0][][] */ -114,-43,-72,127,-86,28,-10,-87,3,-9,-100,16,45,48,36,-22, 
  /* [30][0][][] */ 127,-34,24,-50,26,-2,-36,69,-22,-35,-50,-24,-87,-42,-48,26, 
  /* [31][0][][] */ 78,-64,-64,-74,-6,-93,17,-43,80,127,46,-22,18,38,79,39, 
  /* [32][0][][] */ -48,44,-40,50,-107,63,-63,-62,-36,-11,0,64,127,62,33,44, 
  /* [33][0][][] */ -37,-43,2,127,15,20,8,-42,-24,69,19,-68,-19,34,62,50, 
  /* [34][0][][] */ 51,7,20,3,-4,7,-107,32,-127,64,45,81,-25,10,47,-43, 
  /* [35][0][][] */ 89,-10,4,-36,-26,-127,18,-1,-28,13,-2,31,24,-20,-51,13, 
  /* [36][0][][] */ -40,-15,-127,10,19,86,-70,-42,-14,26,-15,7,76,40,9,-17, 
  /* [37][0][][] */ -15,-123,31,27,-11,85,-41,-104,47,39,-60,11,127,48,10,-22, 
  /* [38][0][][] */ -65,48,-44,5,-46,44,27,3,-9,23,127,114,-25,27,-12,25, 
  /* [39][0][][] */ -3,17,48,89,59,16,-127,41,39,-7,-72,-31,105,13,34,-11, 
  /* [40][0][][] */ -14,21,9,80,-16,78,42,-41,-8,-65,-43,127,50,35,-77,45, 
  /* [41][0][][] */ 28,-2,-46,-104,23,-46,127,23,48,52,9,-6,10,20,-26,24, 
  /* [42][0][][] */ -19,46,44,-16,-72,32,-6,127,-20,-104,14,15,-9,105,9,83, 
  /* [43][0][][] */ -113,-84,28,23,58,40,-47,-127,6,7,-56,-17,-67,13,11,-34, 
  /* [44][0][][] */ -9,-41,-43,11,46,9,-79,-105,127,38,1,127,24,56,10,-21, 
  /* [45][0][][] */ -31,-43,75,-59,-36,-5,20,126,-34,2,39,19,9,127,-12,102, 
  /* [46][0][][] */ -56,-17,1,113,-11,46,-48,-78,-127,1,-20,65,-74,53,-8,-81, 
  /* [47][0][][] */ -77,-29,-100,62,-8,102,12,0,90,32,91,127,-3,58,2,-6, 
  /* [48][0][][] */ -73,-35,-37,-76,30,26,-71,-72,12,61,2,-5,10,7,127,-6, 
  /* [49][0][][] */ -77,-20,98,42,-33,127,5,-6,1,89,-49,-27,23,6,-10,-61, 
  /* [50][0][][] */ -30,127,-18,-113,59,32,35,27,113,-86,3,-20,-68,13,-69,52, 
  /* [51][0][][] */ 8,-11,-57,-17,-12,-18,-63,-127,-1,-111,72,-68,51,6,8,2, 
  /* [52][0][][] */ 9,-29,-53,6,49,-4,-8,17,-33,127,-9,11,98,-1,18,-7, 
  /* [53][0][][] */ -27,9,-52,-71,-18,42,127,38,-25,6,-5,38,-41,-36,13,9, 
  /* [54][0][][] */ -42,-20,25,79,75,13,-12,-54,22,60,-40,-23,3,127,5,-47, 
  /* [55][0][][] */ -39,127,15,-45,5,-68,13,10,0,-50,60,-88,18,-30,74,27, 
  /* [56][0][][] */ 24,-15,27,16,34,21,7,-16,8,-7,53,127,-15,0,32,29, 
  /* [57][0][][] */ 24,-19,-29,53,-35,12,-1,127,7,-38,2,62,-56,-6,12,5, 
  /* [58][0][][] */ 81,127,20,-91,-9,-13,19,40,89,-21,-20,40,4,-70,3,68, 
  /* [59][0][][] */ 35,44,97,-29,24,7,-13,-2,23,26,26,-127,-40,-76,-40,20, 
  /* [60][0][][] */ 0,-13,127,-45,-29,22,66,31,-20,24,-10,4,1,-7,-24,-16, 
  /* [61][0][][] */ 34,46,-82,-118,-34,6,110,127,-20,44,22,65,-63,-4,-81,-24, 
  /* [62][0][][] */ 66,-116,6,-24,-118,-77,-6,72,-127,-108,-94,-65,-3,-57,94,82, 
  /* [63][0][][] */ -18,-8,-23,-49,-16,-6,-56,-127,104,42,-42,65,-8,-23,26,-96, 
  /* [64][0][][] */ -34,66,36,-11,53,-30,19,-29,83,-127,-4,18,9,-28,-65,46, 
  /* [65][0][][] */ -127,85,-1,-82,22,30,45,-28,-58,21,39,-92,10,16,3,-12, 
  /* [66][0][][] */ 110,-43,-16,-67,-38,-24,77,127,-23,29,47,7,-55,70,-99,40, 
  /* [67][0][][] */ -26,7,58,44,87,14,-94,-127,-63,-18,-44,-63,-26,-38,-26,-50, 
  /* [68][0][][] */ -35,-60,-51,80,53,-113,32,-127,-33,69,90,-42,24,10,20,-5, 
  /* [69][0][][] */ -108,22,64,127,94,56,-31,0,-6,1,23,-1,100,-16,16,-28, 
  /* [70][0][][] */ 112,35,-95,-127,-8,-13,23,101,-45,-9,21,17,-52,49,-17,58, 
  /* [71][0][][] */ -32,-31,-10,-7,37,-21,58,98,2,-48,-12,-127,-19,-126,65,14, 
  /* [72][0][][] */ 127,4,-17,9,-31,-79,0,-70,78,-9,-71,-30,13,17,-19,53, 
  /* [73][0][][] */ -40,-127,61,26,-14,-27,-1,10,-19,54,-32,-17,-15,-44,7,-36, 
  /* [74][0][][] */ 88,-3,34,127,50,-4,-107,112,80,-49,-101,-113,68,55,69,36, 
  /* [75][0][][] */ -16,71,-24,-15,-14,40,45,75,86,-3,7,36,-127,51,19,38, 
  /* [76][0][][] */ 39,-28,0,-32,3,-127,-44,27,-7,-22,25,-28,31,25,63,2, 
  /* [77][0][][] */ -100,10,-107,-31,-76,-1,9,-53,9,58,-121,49,11,35,44,-127, 
  /* [78][0][][] */ -57,-127,-41,16,54,50,13,34,-10,-47,-32,-15,16,12,113,45, 
  /* [79][0][][] */ 117,25,-46,-102,28,-65,127,51,57,-2,28,15,27,35,13,45, 
  /* [80][0][][] */ -103,-48,127,30,1,37,-8,-35,-53,38,-81,-100,67,28,-47,-27, 
  /* [81][0][][] */ -24,-43,-19,27,38,127,-31,8,7,-1,1,-38,-38,19,-45,-29, 
  /* [82][0][][] */ -12,-40,7,32,33,61,-76,-125,24,58,-100,-127,-1,-60,-85,-117, 
  /* [83][0][][] */ 41,19,-4,-58,-48,-48,-17,-11,-41,-74,-100,-127,69,-99,73,67, 
  /* [84][0][][] */ 83,45,17,46,-106,-30,-5,44,13,-6,45,-79,-47,38,127,-61, 
  /* [85][0][][] */ -30,-12,11,30,64,19,-29,40,-68,-30,-121,-27,40,67,89,-127, 
  /* [86][0][][] */ 92,50,31,-61,-15,-4,35,62,-46,127,34,6,1,39,-9,50, 
  /* [87][0][][] */ 99,-1,24,-22,-99,-67,127,35,-28,61,-32,24,69,28,-94,87, 
  /* [88][0][][] */ 4,0,-9,52,9,23,-18,-23,127,5,-26,-7,-31,13,70,-97, 
  /* [89][0][][] */ 20,-14,-36,31,-13,-5,6,-74,86,45,-50,-17,-4,32,31,-127, 
  /* [90][0][][] */ 59,-85,-8,-42,0,-4,103,17,-17,69,18,127,21,-13,2,-27, 
  /* [91][0][][] */ -5,-16,24,-7,33,19,42,-18,-36,23,127,-33,-16,38,30,109, 
  /* [92][0][][] */ 6,35,-28,-8,26,79,-88,-127,82,-81,-93,14,-19,-59,-18,4, 
  /* [93][0][][] */ 64,50,37,-102,-4,22,37,12,-53,23,127,33,25,89,-15,85, 
  /* [94][0][][] */ -79,45,-127,-27,17,-113,16,-4,-54,-48,17,-17,6,-44,0,28, 
  /* [95][0][][] */ 41,34,97,-123,-9,8,-31,3,97,-4,-127,-70,-49,18,-76,-24, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00054318411275744438, 0.00037565120146609843, 0.000351336580934003, 0.00027314363978803158, 0.00056078634224832058, 0.00062204716959968209, 0.0010332179954275489, 0.00027416384546086192, 0.00029098286177031696, 0.00045760301873087883, 0.0009832821087911725, 0.00036532265949063003, 0.00039696088060736656, 0.00036105670733377337, 0.00023047561990097165, 0.00045710368431173265, 0.00047945778351277113, 0.0006673515890724957, 0.00051387888379395008, 0.00087591924238950014, 0.00065262801945209503, 0.00086480769095942378, 0.00030623999191448092, 0.00089600251521915197, 0.0017276346916332841, 0.00065553310560062528, 0.00033536198316141963, 0.00050651491619646549, 0.00052903959294781089, 0.00012777118536178023, 0.00015597249148413539, 0.00069517298834398389, 0.00091799203073605895, 0.00048533300287090242, 0.00051804661052301526, 0.00055123138008639216, 0.00043144499068148434, 0.00033368112053722143, 0.00034487989614717662, 0.00066922552650794387, 0.00077883212361484766, 0.00047335788258351386, 6.1015351093374193e-05, 0.0003494279517326504, 0.00024649893748573959, 0.00050881679635494947, 0.00058113003615289927, 0.00039603130426257849, 0.00015593065472785383, 0.00038477263296954334, 0.00038653408410027623, 0.00083397439448162913, 0.00083684030687436461, 0.00098582671489566565, 0.00061971164541319013, 0.00056909536942839622, 0.00093452888540923595, 0.00039686038508079946, 0.00063633243553340435, 0.00061467033810913563, 0.0011885063722729683, 0.00019479125330690295, 0.00039943490992300212, 0.00039659882895648479, 0.00070289743598550558, 0.00062068208353593946, 0.00034377409610897303, 0.0004724495520349592, 0.00049000309081748128, 0.00045029696775600314, 0.00028579437639564276, 0.00044058993807993829, 0.00039799927617423236, 0.00056363519979640841, 0.00061613862635567784, 0.00053451297571882606, 0.0014724618522450328, 0.00058681186055764556, 0.0010745261097326875, 0.00036362651735544205, 0.00021986696810927242, 0.00060461962129920721, 0.00039840885438024998, 0.00054513668874278665, 0.001581692136824131, 0.000556074024643749, 0.00064795184880495071, 0.00010268052574247122, 0.00026906671700999141, 0.00046146358363330364, 0.00048531164065934718, 0.001532101072371006, 0.00064453209051862359, 0.000461698102299124, 0.00052649638382717967, 0.00022947066463530064, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -18535, 10653, 19013, 33514, 4973, -7097, 55, -838, 22026, -22185, 27455, 6288, -17985, 5883, 32100, -9850, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00022071265266276896, 0.00026559762773104012, 0.00023797196627128869, 0.00018503065803088248, 0.00030594630516134202, 0.00026855201576836407, 0.00022225332213565707, 0.00030917290132492781, 0.00014488385932054371, 0.00019674855866469443, 0.00023718064767308533, 0.00039546468178741634, 0.00024384028802160174, 0.00028031677356921136, 0.00038102510734461248, 0.00020874493930023164, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -17,10,8,58,-30,100,-38,-77,82,23,41,-9,44,-55,39,49,-7,-10,-27,-26,126,-73,49,-21,-23,-23,-66,-126,28,29,56,22,112,32,36,14,42,-11,6,-6,-27,37,21,23,37,-38,-11,2,12,13,49,11,-40,20,-29,72,127,78,-12,-17,-32,62,-67,16,21,-3,16,-36,-71,-59,-31,-15,-47,-86,39,27,15,-126,34,-80,42,-44,-10,-13,43,57,9,95,27,-46,46,-43,10,73,-33,118, 
  /* [1][0][][] */ -45,-37,51,71,28,-66,-56,-12,-14,-61,0,53,-14,-64,-68,-9,-76,18,-9,25,-18,1,-87,21,111,-57,-16,12,-48,51,-29,95,89,-53,-54,-38,-6,-17,60,-22,-66,-78,-22,-23,-76,55,114,7,80,49,14,-67,47,-20,23,-67,-12,105,-127,-108,35,21,78,-49,18,-88,-31,3,102,7,-18,27,-123,51,-92,41,-8,64,-21,17,70,-51,-51,14,-61,-18,60,18,6,-8,-11,25,58,-58,39,13, 
  /* [2][0][][] */ 1,-4,-10,-5,24,-8,-31,47,35,13,81,-7,-17,28,19,-15,-42,-17,-22,1,-5,-65,37,-65,-7,-23,-71,18,9,34,58,-46,6,-41,-38,-4,4,27,-127,-16,23,-2,-25,44,-35,-35,33,-11,10,29,-36,7,24,-11,30,-31,-51,64,-42,14,-19,15,7,56,22,-50,6,-103,18,-18,14,-1,-34,52,-11,-10,28,7,-22,3,6,32,63,37,-19,23,-26,40,2,35,-33,15,-57,-26,39,23, 
  /* [3][0][][] */ -7,-5,-57,47,17,-60,8,10,-41,20,8,11,-47,25,30,-23,3,-30,16,68,26,0,4,16,-10,-16,-25,-11,18,-14,6,5,17,-17,11,-41,-89,18,25,82,-31,-85,-37,-30,-10,-3,-31,43,-102,51,-53,4,-127,-16,13,-43,-10,-12,-20,-10,29,17,3,8,-28,-65,-65,-3,30,8,-31,7,-38,39,30,1,-1,-8,-4,-11,37,-11,24,31,58,-29,-4,-50,32,5,10,-5,14,-14,63,-23, 
  /* [4][0][][] */ 1,5,-12,-1,-7,-28,-37,-14,21,-27,-31,-68,-15,15,30,6,-11,20,-14,29,9,33,24,-4,-16,-24,8,27,-1,22,4,-2,-14,6,-22,-5,12,-44,57,-10,-15,32,-90,-9,44,40,39,7,35,38,-56,-27,19,-16,1,-33,-12,-62,0,16,-18,-6,-34,-26,-21,-67,22,-41,-5,32,11,1,8,-16,-29,39,7,23,13,66,-11,3,127,-2,-12,-32,-57,-27,41,57,-30,55,-25,10,-1,-28, 
  /* [5][0][][] */ 33,-8,28,49,63,-57,12,127,32,28,-23,-84,-121,65,59,3,-38,12,5,-23,-17,23,-1,-55,4,20,-4,58,62,5,17,30,-58,-1,7,7,-53,1,-14,21,-54,-15,10,-3,42,15,27,7,16,38,-88,-26,-27,-62,40,-29,-38,-37,-16,3,-60,0,-24,-40,-15,-11,-22,7,40,31,39,20,22,32,63,-2,35,25,-38,112,23,-17,53,16,-26,-46,34,-69,-2,73,-37,-27,4,-21,-17,-51, 
  /* [6][0][][] */ -27,-1,-1,-56,-17,24,-1,7,13,13,53,127,34,-32,-22,48,56,-20,-3,25,-32,8,-43,9,59,-37,57,7,16,-20,23,4,-14,-42,21,-22,59,25,-53,38,15,-15,-47,4,39,-32,33,-90,1,17,46,30,19,13,-47,-19,23,29,-1,13,38,-11,55,18,37,54,4,39,-17,-1,18,8,-38,15,16,-48,-31,15,11,-42,-7,2,-5,-34,-14,74,68,-22,25,-42,19,1,-14,-4,1,18, 
  /* [7][0][][] */ 1,-5,31,-36,-19,19,-15,-27,-8,21,24,63,8,-43,-5,22,30,-29,-17,-6,-12,-27,-12,-41,15,-26,29,18,10,-5,9,-5,-6,-44,-11,-12,18,-60,-104,-8,11,-2,-16,22,24,-11,-25,31,-13,6,23,20,19,23,-30,-11,28,35,-6,18,7,-2,9,-22,-21,39,19,9,1,7,-2,25,-25,10,9,-17,10,-25,23,-57,1,-29,27,3,-9,127,-9,11,-21,-40,22,18,-41,19,9,12, 
  /* [8][0][][] */ -93,51,45,27,-57,-72,47,-11,-13,61,-106,-93,33,21,10,11,-56,47,-57,82,82,54,28,75,-52,47,-27,-35,71,-77,-59,33,92,38,-14,-15,-96,30,48,28,5,33,-28,-106,-101,21,87,33,14,34,25,-16,-65,62,31,-5,1,27,-69,-90,16,-31,-55,-10,-35,-54,21,-88,89,-30,42,34,14,32,-40,82,97,-46,-43,15,19,-27,127,20,-18,-78,7,43,48,-42,-81,44,-32,-42,52,-32, 
  /* [9][0][][] */ 44,-37,-28,22,37,-16,-40,82,46,14,-21,-18,-70,42,33,47,-73,41,52,-13,-7,3,15,-44,32,1,16,25,-1,1,-45,-13,8,8,-17,20,-10,36,-53,28,7,-13,16,-65,-22,6,65,-56,-11,31,-35,-12,-33,9,32,-19,-25,34,-12,4,-12,22,1,16,-16,127,38,-32,5,-17,71,25,22,10,43,-24,27,-23,-20,33,22,7,64,11,-17,37,14,5,-64,80,-54,-36,50,-4,15,-5, 
  /* [10][0][][] */ 16,35,-62,99,34,-69,-70,-2,15,48,41,2,-20,0,41,-56,-6,16,-28,-14,-55,-38,-87,-45,-35,-68,-44,114,19,63,42,24,-23,-9,-50,-19,97,-127,-63,-31,11,80,54,38,3,-15,-4,-40,-4,-4,-10,28,18,0,-1,15,40,66,-17,-15,3,9,2,14,23,18,18,11,7,-46,65,83,-96,19,-59,11,22,-5,-21,-14,8,-28,16,9,55,25,44,57,-8,25,94,-35,30,86,-7,-95, 
  /* [11][0][][] */ 77,16,7,36,-23,39,50,76,-6,29,18,-55,-30,45,42,-31,7,-13,-109,-28,33,15,111,5,-17,20,-11,1,21,51,42,-3,-50,18,78,12,25,20,-45,53,35,-7,71,-73,5,-64,36,-46,-127,31,-29,-16,45,10,-27,41,4,-42,69,30,-56,-21,-44,75,-50,38,-59,15,42,14,102,9,-47,-2,85,19,6,-22,-102,-17,33,-15,115,39,-32,2,14,-5,23,89,-9,32,-12,-7,-53,69, 
  /* [12][0][][] */ -2,11,46,-45,30,49,20,-21,127,-57,95,-17,54,15,-14,-31,-1,25,12,16,8,35,-44,24,25,29,8,-35,-116,-2,6,-39,-7,18,8,29,66,26,68,-57,-10,21,14,5,17,35,-38,17,-5,17,-35,7,-10,-6,106,-20,38,-45,26,23,-27,12,-21,39,45,21,-8,25,-5,20,-4,-52,10,-4,-75,-25,0,23,-8,-16,-27,12,-60,32,3,-24,1,-31,-23,0,4,-14,26,-49,-19,9, 
  /* [13][0][][] */ 37,-5,-12,7,43,33,-24,-19,18,34,6,8,-21,-28,14,-16,17,-61,-82,-17,-20,-33,-16,-72,17,-44,39,23,14,-13,10,-1,-25,-16,33,21,29,-76,-55,-12,-22,-4,-9,72,47,-11,-3,-127,47,32,5,57,15,27,-43,17,9,41,72,32,37,28,13,-20,-20,2,-29,23,8,-3,3,2,-46,25,18,10,-34,-22,0,-19,25,1,-6,37,-7,69,-4,-7,12,46,59,-4,-23,41,15,26, 
  /* [14][0][][] */ -103,-11,-4,5,-33,-18,1,30,-21,5,-7,12,102,-6,-57,0,11,-5,-7,38,-32,-34,-24,30,-67,-9,49,-3,-39,-44,-44,-22,33,0,-12,-41,-13,15,49,0,-9,28,-19,-13,21,85,88,67,-76,29,12,8,-23,-15,39,-13,-1,35,21,35,9,21,67,6,2,4,-27,20,-23,48,-12,-43,-55,-31,-70,-7,-19,-12,127,-2,16,6,-16,22,59,-10,-13,54,11,-27,64,-12,18,14,-15,-31, 
  /* [15][0][][] */ 52,-13,44,-17,-13,73,33,-34,27,7,40,69,-31,-38,-54,60,75,8,32,-45,-23,8,-109,5,19,25,10,-11,-8,19,-3,-126,-23,-40,19,19,98,-92,-94,-93,62,105,-51,70,95,19,-5,-77,59,-54,-3,63,64,-71,13,-76,27,5,32,55,-83,-36,50,39,42,-38,-18,60,7,85,-1,3,5,41,-63,-33,13,-40,65,-15,-33,-14,13,52,-13,46,-23,-10,18,-39,66,50,-127,104,-7,12, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0093802874907851219, 0.011287898756563663, 0.010113808326423168, 0.0078638028353452682, 0.013002717867493629, 0.011413460597395897, 0.0094457659870386124, 0.013139848597347736, 0.0061575639992952347, 0.0083618136122822762, 0.010080177336931229, 0.016807248815894127, 0.01036321185529232, 0.011913462541997433, 0.016193566843867302, 0.0088716596364974976, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 15122, -16477, 4241, 59123, -3003, -2818, -15408, 9128, -2963, 3534, -1041, -2777, 1378, -5447, 4141, -21283, -3562, 9625, 28659, 1673, -5685, -6384, 3283, 202, 17971, -3286, -483, -3775, -6927, -8945, 10334, -7034, -3066, -6569, -1486, 20937, 2008, 2789, 15729, -1106, -20, 3256, -6796, -10519, -9472, 80878, 14, 19164, 24300, -13871, -933, 6175, 6393, 1756, -7019, 1910, -14129, -396, 2053, -3063, -1177, -875, -12071, 1116, 376, 11356, 25899, 32314, -10084, -502, -2230, -3137, 20820, 4546, -4290, 567, 24729, 33552, 795, -17274, -5437, -16288, 320, -6839, 1191, -3322, -4713, 1185, -467, -663, -336, -4073, 3171, -6638, 2143, 55503, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00019126661936752498, 6.1450009525287896e-05, 0.00015558695304207504, 3.4434960980433971e-05, 0.00014534661022480577, 0.00025682526757009327, 0.00030317695927806199, 8.8629138190299273e-05, 0.00016468243848066777, 0.00031402567401528358, 0.00026694621192291379, 0.00059536664048209786, 0.00011164326133439317, 0.00034318622783757746, 0.00032119060051627457, 5.0821417971746996e-05, 0.00011692020780174062, 0.00015093521506059915, 5.1749044359894469e-05, 0.00029734105919487774, 3.9010563341435045e-05, 0.00014597221161238849, 0.00012817460810765624, 0.00051113049266859889, 0.00020174411474727094, 0.00032335109426639974, 0.00016469853289891034, 0.00018302735406905413, 6.9421330408658832e-05, 6.5517575421836227e-05, 8.6134190496522933e-05, 0.00019836750288959593, 0.00012155280273873359, 8.3699902461376041e-05, 0.00025860377354547381, 0.00011245934729231521, 0.00064730213489383459, 0.00011101116251666099, 0.00010762001329567283, 0.00015236038598231971, 0.00024336398928426206, 0.00050708581693470478, 0.00043449949589557946, 0.00013087064144201577, 0.00020238461729604751, 3.5812299756798893e-05, 0.00024370277242269367, 0.0001850979751907289, 0.00011762609938159585, 0.00013161511742509902, 0.00013104746176395565, 0.0001275229878956452, 0.00031808626954443753, 0.00013933025184087455, 0.00034720881376415491, 0.00056911754654720426, 0.00022870846441946924, 0.00025265209842473269, 0.00014124631707090884, 0.00010565679258434102, 0.00033119731233455241, 8.3709746832028031e-05, 0.00027724719257093966, 0.00012651793076656759, 0.00018038622511085123, 0.00027248659171164036, 6.2126084230840206e-05, 6.0327172832330689e-05, 0.00033011747291311622, 0.00029908164287917316, 0.00021990206732880324, 7.1721544372849166e-05, 0.00029351792181842029, 0.00016162577958311886, 0.00012429727939888835, 0.0001889953127829358, 0.00054988689953461289, 4.5181957830209285e-05, 0.00030637360760010779, 0.0001088796416297555, 0.00014340050984174013, 0.00013854230928700417, 0.0007025020313449204, 6.1186619859654456e-05, 0.00012706815323326737, 0.00019415597489569336, 0.00012091454118490219, 0.00018878094851970673, 0.0001607212470844388, 0.00011499777610879391, 0.00027745778788812459, 8.5472835053224117e-05, 0.0001336595305474475, 0.00039635456050746143, 0.00057237851433455944, 7.7244556450750679e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -20,18,-21,99,-16,31,-64,-56,19,-7,127,-7,6,-11,-2,60,6,13,-43,11,78,-10,33,-39,0,19,33,49,39,37,34,50,12,31,13,-19,10,50,-37,-27,23,5,25,15,-74,-68,24,-8,-8,-27,-6,-12,46,2,-11,4,8,-32,14,-35,30,-6,127,31,-16,-13,3,-45,59,39,-10,1,69,-26,115,-1,13,-126,35,58,9,5,127,-7,31,27,-1,-25,33,-6,-19,82,-5,19,5,12, -52,14,-12,7,40,-4,-13,-127,48,9,-118,-18,-12,-7,7,109,14,-27,-1,-10,93,-114,127,30,-66,-29,-104,-19,31,47,-50,16,127,19,-11,-6,-22,127,-58,-127,5,-18,-32,-3,55,-127,127,-45,-69,36,42,1,42,-72,38,52,34,45,-92,80,127,36,-16,-26,49,-37,-81,-1,35,-35,-24,60,-57,-42,100,-15,-38,-53,-32,74,-58,78,-11,11,-12,41,72,-42,-26,49,-13,82,-127,-19,21,-127, -14,-7,-24,-63,6,22,28,17,1,-17,27,55,2,-14,-3,38,-19,22,-12,28,15,15,20,-38,-4,-33,18,5,-3,2,55,-82,52,24,8,-32,16,1,-7,-23,4,8,-9,7,38,-42,25,-4,13,-18,6,-11,11,1,-7,11,-1,47,17,-5,7,-12,-15,-13,-24,-18,45,-54,-117,-9,45,-9,-127,-15,10,9,4,-7,10,30,-16,32,-39,1,-48,19,31,25,-17,-15,29,-2,13,13,-2,-50, 
  /* [0][1][][] */ -40,69,-21,45,-78,-19,-4,-37,14,96,-46,-11,-45,-30,-3,91,127,-39,-100,-10,60,-127,-35,15,-36,-36,-124,9,71,64,-44,29,-123,-77,-48,0,59,-14,-20,50,-25,82,1,7,36,-79,-17,-35,127,47,-13,25,38,6,-39,-18,34,4,-127,127,-46,-93,40,127,-57,-33,-82,127,-43,127,-16,69,-28,-29,49,5,-40,-70,127,49,127,29,-5,2,127,18,-81,29,-45,-33,-95,31,88,105,21,-56, 127,127,127,127,-44,-127,127,20,127,-127,18,-127,-115,127,127,127,-11,-127,-56,-127,127,29,-71,127,127,127,-50,-127,127,127,-127,127,-12,-127,-103,127,-127,-65,122,101,-127,-127,127,127,127,-119,-102,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-53,22,-118,-28,-97,-79,127,127,-66,114,127,-104,-127,127,-38,127,-127,-127,-127,127,-82,127,-31,127,81,127,-41,-127,-21,-111,-127,-121,-16,-127,-29,-127,-127,106, -27,58,-41,0,127,63,-17,38,0,19,-15,-4,-25,-36,1,2,-73,-23,-127,39,30,93,-24,-103,-33,-33,127,82,14,31,72,9,123,-41,127,-5,57,-5,-40,15,26,28,-23,5,-17,-79,-11,-46,86,16,-27,55,3,-9,-68,-10,17,5,109,-103,-6,127,-4,-44,-108,-34,-64,90,11,-13,109,30,-10,-36,20,43,-34,-13,-40,-1,-32,7,53,19,-99,25,127,-50,42,-30,127,-5,-121,37,28,12, 
  /* [0][2][][] */ -8,-43,-27,-59,-8,15,41,39,1,3,-14,83,14,-36,-4,30,36,-9,-58,23,-7,46,-35,-26,0,-20,6,16,-1,4,58,-77,-29,63,-35,-30,28,-37,-96,27,12,4,-44,34,17,-123,-12,-7,-9,21,22,-9,4,-2,-18,5,1,60,-41,36,-5,-27,26,12,-4,-13,26,-61,-62,13,-41,-8,-99,-17,16,18,9,-21,64,39,25,19,-8,35,16,29,-7,4,-6,28,12,-18,18,55,-11,-29, -36,-15,-36,31,-53,55,-8,66,13,-16,58,7,127,-7,-10,-28,-14,-40,-90,14,-5,89,-47,-92,-46,-39,105,92,32,63,60,-6,-124,67,-18,-23,-28,-32,-127,-4,41,-16,-20,46,-17,-52,-19,-51,-62,46,68,21,-15,-86,39,54,24,30,60,-67,40,-59,-7,-1,19,-26,-127,-58,-10,-24,-85,33,31,-47,-8,-13,-55,20,-71,0,62,40,65,26,1,47,-95,127,15,127,-32,-18,94,-15,39,76, -15,-38,-33,20,10,58,-30,9,10,-18,-1,39,17,-55,5,12,-42,-1,12,23,-18,18,-38,11,-3,24,-16,66,9,1,35,17,28,46,10,-22,-5,-40,-32,15,12,-5,17,23,-62,-65,-6,1,4,3,-1,0,-8,6,-11,-1,-1,-43,10,-47,-16,55,10,-33,-7,-8,25,-57,46,13,37,-7,40,-60,-6,20,6,2,-12,38,-17,32,110,-11,-23,47,51,-7,120,7,1,-14,8,-10,-6,-57, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0081288311630487442, 0.0026116252411156893, 0.0066124452278017998, 0.0014634857652708888, 0.0061772307381033897, 0.010915073566138744, 0.012885020114481449, 0.0037667383439838886, 0.0069990032352507114, 0.013346090912818909, 0.011345214210450649, 0.025303082540631294, 0.0047448384575545788, 0.014585413970053196, 0.013650600798428059, 0.0021599102765321732, 0.0049691088497638702, 0.0064147463999688625, 0.0021993343252688646, 0.012636994943022728, 0.0016579489456489682, 0.0062038186006247997, 0.0054474207572638988, 0.021723045036196709, 0.0085741244256496429, 0.013742420822381973, 0.0069996877573430538, 0.0077786622568964958, 0.0029504064004868269, 0.0027844968717545271, 0.0036607030779123306, 0.0084306187927722931, 0.0051659941673278809, 0.0035572457127273083, 0.010990659706294537, 0.0047795223072171211, 0.027510339394211769, 0.0047179744578897953, 0.0045738504268229008, 0.0064753163605928421, 0.010342969559133053, 0.021551147103309631, 0.018466228619217873, 0.0055620023049414158, 0.0086013460531830788, 0.0015220226487144828, 0.010357367806136608, 0.007866663858294487, 0.0049991090781986713, 0.0055936425924301147, 0.0055695171467959881, 0.005419726949185133, 0.013518665917217731, 0.0059215356595814228, 0.014756374061107635, 0.024187495931982994, 0.0097201094031333923, 0.010737713426351547, 0.0060029681771993637, 0.0044904137030243874, 0.014075885526835918, 0.0035576641093939543, 0.01178300566971302, 0.0053770118393003941, 0.007666414137929678, 0.011580679565668106, 0.0026403586380183697, 0.0025639047380536795, 0.014029991813004017, 0.012710968963801861, 0.0093458378687500954, 0.0030481654684990644, 0.012474510818719864, 0.0068690953776240349, 0.0052826344035565853, 0.0080323005095124245, 0.023370193317532539, 0.0019202331313863397, 0.013020877726376057, 0.0046273847110569477, 0.0060945218428969383, 0.005888048093765974, 0.029856335371732712, 0.0026004312094300985, 0.0054003964178264141, 0.0082516288384795189, 0.0051388680003583431, 0.0080231903120875359, 0.0068306527100503445, 0.0048874053172767162, 0.011791955679655075, 0.0036325955297797918, 0.0056805298663675785, 0.016845067963004112, 0.024326086044311523, 0.0032828934490680695, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 18110, 2168, 8429, -910, 9027, 8993, 23229, 15092, -4634, 14658, 15483, 12460, 12019, 72281, -4463, -3003, 12346, 11608, 675, 1483, -685, 27267, 6671, 10825, 33126, 7727, 16721, 3150, -11, -1664, 8886, 15396, 16542, 5941, 11245, -695, 34947, 11853, 3957, 5745, 4810, 24294, 12208, 7002, 10239, 22121, 28725, 17117, 8046, 3848, 832, -695, 14121, 8811, 20645, 31108, -782, 5811, 8718, 10520, 17147, 9750, 6076, 14769, 3829, 8335, 6058, -857, 36545, 37211, 15887, -5001, -6242, 3522, 644, 6555, 56384, 31611, 13302, -4785, 9567, -3287, -9406, 1708, 11805, 8756, 5696, 13043, 14693, 3291, 14130, 5577, 10309, 21403, -8897, 16916, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00014711094263475388, 0.00020974023209419101, 0.0001337603316642344, 0.00047868641559034586, 0.00014926327276043594, 0.00011158383131260052, 0.00014873289910610765, 0.00021847667812835425, 0.0001409741526003927, 0.00011361193173797801, 8.1261488958261907e-05, 9.4432602054439485e-05, 0.00023782068456057459, 6.5370586526114494e-05, 0.00011613786773523316, 0.00020315578149165958, 0.00015918997814878821, 0.0001645677984924987, 0.00034603968379087746, 0.00019154137407895178, 0.00019590485317166895, 8.9586472313385457e-05, 0.00022976208128966391, 6.9540779804810882e-05, 5.9088859416078776e-05, 0.00022069567057769746, 9.0903689851984382e-05, 0.00016642607806716114, 0.00020527477317955345, 0.00013432980631478131, 0.00015381489356514066, 0.00011805741087300703, 0.00011469742457848042, 0.00017551591736264527, 0.00012884379248134792, 0.00035579261020757258, 6.2250888731796294e-05, 0.00020548253087326884, 0.00010765073966467753, 0.00017607132031116635, 0.00017767401004675776, 8.1250494986306876e-05, 0.0001685746101429686, 0.00012093223631381989, 9.5562463684473187e-05, 0.00014492716582026333, 9.4713665021117777e-05, 7.9089528298936784e-05, 0.00019002049521077424, 0.00019699511176440865, 0.00048458730452693999, 0.00046112955897115171, 0.00018721394008025527, 0.00016950158169493079, 0.000102818819868844, 5.8409212215337902e-05, 0.00028622066020034254, 0.00028062312048859894, 0.00011636949784588069, 0.00016757033881731331, 0.0001019509945763275, 0.00013699759438168257, 0.00017267504881601781, 0.00018744797853287309, 0.00026184305897913873, 0.00015712203457951546, 0.00026260118465870619, 0.00043649479630403221, 7.4499352194834501e-05, 4.3305717554176226e-05, 0.0001243912847712636, 0.00014428977738134563, 7.3660819907672703e-05, 0.00037300764233805239, 0.00014533175271935761, 0.00017287812079302967, 4.4727530621457845e-05, 0.00014178045967128128, 0.00011945821461267769, 0.00025554973399266601, 0.00011125108721898869, 0.0005906531005166471, 8.0444791819900274e-05, 0.00022032760898582637, 0.0001502635859651491, 0.00016988131392281502, 0.00025189595180563629, 0.00011998615082120523, 0.00011229112715227529, 0.00046026881318539381, 9.9956159829162061e-05, 0.00029963420820422471, 0.00019626281573437154, 0.00012496575072873384, 0.00031086298986338079, 0.00018356036162003875, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 2,12,63,73,1,-19,-31,-54,-2,-7,18,-127,77,16,19,-27, 
  /* [1][0][][] */ 58,88,-42,-16,55,6,17,31,15,80,-70,127,-32,3,76,-64, 
  /* [2][0][][] */ -57,-87,-72,28,-5,127,50,33,-22,11,56,4,-37,-122,108,-117, 
  /* [3][0][][] */ 70,88,23,-9,-127,-29,2,17,-30,21,90,-8,28,26,-43,18, 
  /* [4][0][][] */ 32,-22,-13,-112,-103,-21,46,29,-49,11,30,-54,41,-127,58,41, 
  /* [5][0][][] */ 127,-17,-32,12,-51,-75,-17,38,-25,-25,-83,7,18,-13,-32,37, 
  /* [6][0][][] */ -39,-35,2,17,-84,16,100,127,-7,-25,-10,91,19,46,-34,118, 
  /* [7][0][][] */ -39,34,-124,14,39,-37,-16,2,-45,-8,97,112,-28,12,-127,121, 
  /* [8][0][][] */ 127,-84,-41,18,0,46,-83,-47,6,112,-76,43,-124,39,18,8, 
  /* [9][0][][] */ 37,-127,50,49,39,-40,-11,-18,66,-71,-66,-10,-101,77,-23,18, 
  /* [10][0][][] */ -126,62,-44,-101,-11,-24,104,56,44,-117,127,55,16,-39,-91,92, 
  /* [11][0][][] */ 60,7,-56,38,-79,10,127,118,-60,-70,-29,17,-21,55,-31,-13, 
  /* [12][0][][] */ 101,-17,47,-48,4,-127,51,39,1,-38,-50,-79,27,-75,-27,13, 
  /* [13][0][][] */ -35,-77,84,47,52,18,-65,-121,127,-86,-77,-115,11,91,126,27, 
  /* [14][0][][] */ 9,1,-97,-53,16,-127,49,-42,6,8,59,-77,31,71,14,60, 
  /* [15][0][][] */ 23,-19,24,4,19,-60,18,14,-43,-67,-5,-18,-127,-59,-35,41, 
  /* [16][0][][] */ -120,44,31,6,-10,120,-38,41,30,89,-32,-26,-8,-30,18,-127, 
  /* [17][0][][] */ -78,13,12,11,-6,19,38,30,13,127,-35,-71,53,-19,97,-36, 
  /* [18][0][][] */ -3,127,-18,-38,-25,3,35,-26,8,76,32,96,74,-8,6,-13, 
  /* [19][0][][] */ -35,-45,56,73,43,84,-32,40,3,-13,-33,-2,-127,3,55,-73, 
  /* [20][0][][] */ 125,-111,-9,-105,-81,32,54,-15,2,-26,-127,78,-39,34,49,80, 
  /* [21][0][][] */ -124,76,127,53,42,47,48,-10,-9,-25,19,-48,36,80,-76,-26, 
  /* [22][0][][] */ 24,-35,33,6,14,-7,20,127,31,31,18,76,-65,45,-2,-31, 
  /* [23][0][][] */ 47,54,-21,7,-30,-127,51,114,-10,-47,56,-15,-15,32,15,77, 
  /* [24][0][][] */ 9,-58,-6,4,71,44,-45,-109,43,91,-31,99,-41,-1,127,-3, 
  /* [25][0][][] */ -41,-68,-45,35,-4,55,-29,-25,-40,-17,-57,39,31,127,22,-2, 
  /* [26][0][][] */ 56,-14,68,127,79,104,-93,47,-93,-15,-40,17,24,-31,106,-54, 
  /* [27][0][][] */ -127,43,12,24,46,69,-9,-26,3,28,89,63,-19,-10,-11,-47, 
  /* [28][0][][] */ 19,-22,22,22,-33,-44,50,127,40,21,-30,-47,-102,-28,20,63, 
  /* [29][0][][] */ 21,43,-8,-71,-22,-44,51,-27,-127,-4,3,9,-11,-7,-64,59, 
  /* [30][0][][] */ -10,-16,-127,-22,-3,-28,20,17,-65,-15,-4,2,-49,-44,-25,6, 
  /* [31][0][][] */ 127,-47,-68,-24,-46,-33,3,48,-62,4,-27,3,14,5,-49,70, 
  /* [32][0][][] */ -127,31,27,64,-1,21,10,-4,9,48,93,21,-24,7,27,-19, 
  /* [33][0][][] */ -35,-81,95,28,-113,117,10,3,-25,104,-127,67,-54,-8,81,-71, 
  /* [34][0][][] */ -34,-48,2,-16,102,109,-57,-27,11,-45,-26,-127,55,41,40,-48, 
  /* [35][0][][] */ 50,-81,55,64,-9,13,7,20,-89,38,-36,43,24,127,-5,-31, 
  /* [36][0][][] */ -54,80,-43,-28,-127,5,95,17,-33,-5,106,49,4,-1,-31,71, 
  /* [37][0][][] */ 2,44,-6,-43,-45,-40,-13,-127,19,43,6,-13,-11,-112,111,2, 
  /* [38][0][][] */ 1,127,3,-70,-36,-89,14,59,-52,-80,99,38,44,-38,-93,59, 
  /* [39][0][][] */ -1,-50,0,9,-10,-6,18,127,15,47,-20,48,-15,106,29,12, 
  /* [40][0][][] */ 31,29,6,-32,-28,59,24,19,-73,-73,22,-9,19,-86,-127,14, 
  /* [41][0][][] */ 10,-35,-7,-127,-10,-13,-29,-92,-12,-80,-20,-19,-34,-59,-92,107, 
  /* [42][0][][] */ 68,-20,-36,30,-35,-13,-42,81,-68,-34,23,63,-24,127,-19,-11, 
  /* [43][0][][] */ -17,52,-84,127,-13,-14,60,-94,-56,41,19,-89,-76,-109,28,-12, 
  /* [44][0][][] */ -65,-116,-127,51,59,51,-99,-92,-85,25,46,-80,-74,-90,2,-49, 
  /* [45][0][][] */ -35,78,-6,-120,-68,-39,35,-35,-60,33,51,23,41,-127,62,21, 
  /* [46][0][][] */ 62,-69,127,48,106,-21,-44,-1,49,63,-109,-85,-72,-10,46,-58, 
  /* [47][0][][] */ 7,-34,-28,-70,-91,7,-6,89,-75,-95,46,82,-58,-127,40,75, 
  /* [48][0][][] */ 5,-6,8,-127,-22,-27,-11,-19,-15,-29,29,38,-7,0,-49,77, 
  /* [49][0][][] */ 11,-47,-5,58,127,7,15,-12,-38,-12,-28,68,60,-37,34,7, 
  /* [50][0][][] */ 67,-1,26,-22,1,45,-58,-6,-41,19,127,-45,39,-31,-15,-27, 
  /* [51][0][][] */ 72,51,62,7,-20,29,-51,68,27,-42,-102,127,-10,81,-40,-29, 
  /* [52][0][][] */ 0,2,57,-26,25,-25,21,0,-9,0,3,6,-12,34,-127,18, 
  /* [53][0][][] */ 5,21,-53,-127,-25,18,11,-41,-36,53,0,-3,17,-85,74,56, 
  /* [54][0][][] */ 44,-15,-71,-3,-52,-77,127,104,25,-52,-37,-24,-111,66,24,-10, 
  /* [55][0][][] */ -9,127,0,-37,-48,-80,57,-62,24,-91,55,13,-64,-92,-86,32, 
  /* [56][0][][] */ -6,49,32,87,-61,9,37,127,-95,-17,65,19,72,-48,-14,-1, 
  /* [57][0][][] */ 127,-43,41,-5,-28,-41,-18,-53,0,-34,-48,-19,62,16,-11,56, 
  /* [58][0][][] */ 127,62,10,3,-30,-31,3,67,0,-56,-29,85,-40,-12,-73,-13, 
  /* [59][0][][] */ 127,-104,0,34,34,2,-41,-29,38,76,-101,-2,-27,-2,75,-23, 
  /* [60][0][][] */ -127,41,-77,33,-12,-10,48,71,4,-8,99,-74,37,19,14,-9, 
  /* [61][0][][] */ -36,28,51,41,-1,-38,-55,-69,127,34,19,-32,21,7,-1,-88, 
  /* [62][0][][] */ -37,-122,-25,87,8,127,-29,61,26,7,-71,25,-6,44,-67,-84, 
  /* [63][0][][] */ -108,53,105,-50,-32,-11,13,-65,-47,22,64,65,-80,-127,23,-47, 
  /* [64][0][][] */ 30,13,23,9,38,13,6,-43,-16,25,-37,1,-16,-127,-15,-15, 
  /* [65][0][][] */ 19,107,38,-26,117,36,-20,-127,-6,-73,24,-60,71,-45,20,33, 
  /* [66][0][][] */ -127,-29,-75,21,-42,72,10,-73,-60,-62,-96,109,80,24,103,119, 
  /* [67][0][][] */ 46,-37,2,43,13,-44,28,28,127,31,29,2,-36,-51,-87,37, 
  /* [68][0][][] */ 17,-29,60,127,3,7,1,1,0,35,-3,10,58,-3,47,-34, 
  /* [69][0][][] */ 38,61,60,86,96,16,19,-85,87,44,7,-4,75,127,26,2, 
  /* [70][0][][] */ -73,-31,86,8,76,59,46,32,127,19,52,-23,22,71,77,14, 
  /* [71][0][][] */ 36,74,-7,43,1,-127,-16,63,20,-73,23,-31,1,-72,-2,61, 
  /* [72][0][][] */ -114,-97,8,118,84,34,11,-11,8,-3,-127,19,26,15,1,-5, 
  /* [73][0][][] */ -63,-7,37,-29,31,-75,-14,-18,127,11,-34,-95,-21,25,-67,-54, 
  /* [74][0][][] */ -13,5,-118,-41,-79,63,55,1,-53,54,-38,122,-127,-61,64,-38, 
  /* [75][0][][] */ -37,18,-85,101,-13,63,0,-122,-66,6,-5,-46,23,-127,-22,-17, 
  /* [76][0][][] */ -107,11,-37,28,38,-6,-73,-127,0,-77,-3,-2,28,-32,10,-28, 
  /* [77][0][][] */ 63,-98,-59,99,-63,32,-39,84,73,4,-63,77,-127,89,31,-13, 
  /* [78][0][][] */ -17,-6,13,22,-49,55,-111,9,-25,-9,-50,-40,-30,127,-24,-25, 
  /* [79][0][][] */ 38,80,55,2,-6,24,-93,-17,-75,-22,127,4,93,-67,-62,-20, 
  /* [80][0][][] */ -93,-99,-23,65,17,28,-40,-72,-62,-14,-127,24,42,-76,-14,43, 
  /* [81][0][][] */ 36,19,-82,32,127,41,-18,-32,-38,-4,19,-56,-40,-23,-39,4, 
  /* [82][0][][] */ 34,86,10,26,-32,-36,-90,-46,-127,50,78,2,-93,-15,-34,-32, 
  /* [83][0][][] */ 58,67,-5,-28,-9,-5,10,12,14,1,127,-23,-33,-58,-18,-27, 
  /* [84][0][][] */ 117,-127,-24,-88,45,-33,-53,-84,-11,-45,-113,5,-14,-19,46,-1, 
  /* [85][0][][] */ 14,4,-14,-27,-37,-37,127,125,-35,6,7,-22,10,71,-16,4, 
  /* [86][0][][] */ 127,-74,-84,20,-22,-25,30,-34,-49,37,-44,-73,6,-19,59,35, 
  /* [87][0][][] */ 77,15,103,-53,-24,-73,-6,27,83,-13,-67,-68,-20,-127,0,0, 
  /* [88][0][][] */ -24,-36,-34,5,68,4,2,-127,-16,15,-56,-6,-17,-29,35,3, 
  /* [89][0][][] */ 28,-14,-18,-42,32,69,-29,54,81,-1,18,127,15,21,32,90, 
  /* [90][0][][] */ 53,16,-95,127,-51,16,-44,-69,26,106,-39,81,-13,28,86,-68, 
  /* [91][0][][] */ 86,-62,36,-27,19,-127,-6,14,47,-16,-84,-19,21,-3,-50,4, 
  /* [92][0][][] */ -8,-3,127,1,25,10,-35,7,-11,-9,-33,16,-10,27,-39,-12, 
  /* [93][0][][] */ 106,-117,-7,-49,-54,-71,-92,-101,-47,23,-91,-41,-37,1,-66,127, 
  /* [94][0][][] */ 67,12,53,25,54,-25,-69,59,24,-18,-50,57,34,127,-45,-49, 
  /* [95][0][][] */ -72,32,59,38,-7,62,-4,2,30,6,127,-15,87,-23,-22,-45, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00061943748733028769, 0.0008831495069898665, 0.00056322227464988828, 0.0020155964884907007, 0.00062850024551153183, 0.00046984408982098103, 0.00062626699218526483, 0.00091993593377992511, 0.00059359741862863302, 0.00047838376485742629, 0.00034216634230688214, 0.00039762569940648973, 0.0010013873688876629, 0.00027525477344170213, 0.00048901967238634825, 0.00085542449960485101, 0.00067029846832156181, 0.00069294276181608438, 0.0014570632483810186, 0.00080651993630453944, 0.00082489312626421452, 0.00037722018896602094, 0.00096745515475049615, 0.00029281413299031556, 0.00024880442651920021, 0.00092927936930209398, 0.0003827665641438216, 0.00070076738484203815, 0.00086434691911563277, 0.00056562013924121857, 0.00064766569994390011, 0.0004971022717654705, 0.00048295443411916494, 0.00073904177406802773, 0.0005425203125923872, 0.0014981296844780445, 0.00026211873046122491, 0.00086522172205150127, 0.00045328307896852493, 0.00074138044146820903, 0.0007481288630515337, 0.00034212003811262548, 0.00070981413591653109, 0.00050920725334435701, 0.00040238318615593016, 0.00061024230672046542, 0.00039880917756818235, 0.00033302090014331043, 0.00080011598765850067, 0.00082948384806513786, 0.0020404432434588671, 0.0019416701979935169, 0.00078829843550920486, 0.00071371736703440547, 0.00043293740600347519, 0.00024594264687038958, 0.0012051843805238605, 0.0011816148180514574, 0.00048999499995261431, 0.00070558552397415042, 0.00042928327457047999, 0.00057685340289026499, 0.00072707980871200562, 0.00078928394941613078, 0.0011025379644706845, 0.00066159100970253348, 0.0011057301890105009, 0.0018379410030320287, 0.00031369313364848495, 0.00018234663002658635, 0.00052377220708876848, 0.00060755846789106727, 0.00031016231514513493, 0.0015706167323514819, 0.00061194587033241987, 0.00072793487925082445, 0.00018833343347068876, 0.00059699249686673284, 0.0005030006286688149, 0.0010760388104245067, 0.00046844300231896341, 0.0024870526976883411, 0.0003387274919077754, 0.00092772959033027291, 0.00063271226827055216, 0.00071531627327203751, 0.0010606538271531463, 0.00050522357923910022, 0.00047282228479161859, 0.001938045839779079, 0.00042088364716619253, 0.001261664554476738, 0.00082640041364356875, 0.00052619108464568853, 0.0013089453568682075, 0.00077291438356041908, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -25666, -4773, 13472, -2133, 14049, -646, -21637, -57839, -13565, 61288, 43984, -17785, 16355, -20022, 49095, -39311, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00055523065384477377, 0.00050086580449715257, 0.00073654152220115066, 0.00082944275345653296, 0.00046557810856029391, 0.00069714832352474332, 0.00086179375648498535, 0.00042236794251948595, 0.00070586253423243761, 0.00029262996395118535, 0.00058256747433915734, 0.00039640680188313127, 0.00065250560874119401, 0.0011836652411147952, 0.00029412956791929901, 0.00028896392905153334, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -3,-29,-41,34,-5,-35,1,56,-11,8,23,19,19,-35,22,19,-16,-27,17,-11,61,-22,54,127,-8,34,-18,-33,17,-17,31,-26,-48,49,10,4,18,21,10,18,-58,-18,11,26,-28,2,-62,-49, 
  /* [1][0][][] */ -42,1,33,26,-14,2,-12,50,-19,5,14,-42,-2,-5,-44,-9,-23,127,7,6,-15,-11,34,-20,-25,-42,-9,9,6,-84,-2,14,-14,-3,17,5,17,-40,-5,16,-2,-8,78,5,-16,16,57,-8, 
  /* [2][0][][] */ -39,-10,1,-49,9,-54,23,-3,-18,23,21,15,6,10,-42,-8,-31,-24,-54,-20,-30,1,-31,-127,-24,61,-6,10,29,-34,9,-19,8,27,31,-20,18,-7,9,-9,-50,12,-43,-1,-32,-8,11,22, 
  /* [3][0][][] */ -9,63,-21,-46,7,9,-9,-6,-41,-5,2,32,-127,14,-22,-36,15,2,-41,-36,-42,-6,9,4,15,-9,9,31,-24,8,11,4,20,-11,15,16,-12,13,35,7,-3,11,16,-23,16,-26,17,30, 
  /* [4][0][][] */ 46,-26,39,-4,10,31,33,-31,-51,-1,5,-29,-31,23,-21,5,48,5,-88,19,-4,6,-20,56,5,-30,37,65,21,-57,0,15,54,-28,43,-127,2,33,-22,17,-28,-6,13,-19,-7,2,-8,39, 
  /* [5][0][][] */ 27,15,-30,43,18,19,-8,17,-21,-3,46,12,-13,55,9,-6,-43,28,11,-4,-29,-15,-12,-30,10,-20,4,-13,23,-14,0,-27,85,-127,-4,23,-3,-23,3,3,-91,40,13,-13,7,-8,-82,4, 
  /* [6][0][][] */ 24,-3,26,12,-15,-12,16,-4,16,8,-7,0,-6,-23,-5,8,8,0,127,17,23,34,30,-30,-10,-13,9,-11,-19,-1,-10,19,1,-5,26,-22,5,-26,69,2,12,2,-2,10,-9,22,27,-19, 
  /* [7][0][][] */ -49,-29,25,51,-14,74,2,45,43,51,-34,127,74,-60,4,-1,-9,-52,27,4,0,-33,22,75,-23,-71,-63,-14,-46,-14,-13,-6,-12,-2,-1,5,8,-56,85,-38,38,70,-60,-37,-19,-8,35,-83, 
  /* [8][0][][] */ -42,-26,44,25,33,10,4,41,3,-41,-3,59,35,-22,19,4,-15,51,-8,-1,-28,-1,-25,-7,3,37,15,52,10,74,-4,28,-6,21,-18,-127,-83,28,35,28,13,6,84,-34,22,42,2,9, 
  /* [9][0][][] */ -36,40,-16,7,-26,-20,-68,-32,51,-54,29,56,-86,50,125,-9,-30,2,-70,-57,41,-13,-14,-45,36,-9,80,-28,18,20,-20,-42,51,27,62,-121,-57,-116,-127,17,-57,8,93,50,42,-12,-8,-51, 
  /* [10][0][][] */ -1,-11,-28,-96,34,74,20,-39,10,16,22,10,49,-42,-30,36,54,1,51,-47,40,-63,38,39,-34,-127,-1,-43,46,14,35,-50,-30,-64,34,4,17,-41,-25,-69,-28,-73,11,18,-3,21,58,-19, 
  /* [11][0][][] */ 28,45,-5,75,47,-35,-45,-31,0,12,-57,24,-3,96,30,-96,-25,83,12,17,-47,-92,38,5,76,-10,5,-46,52,-61,69,-115,87,-29,-35,-57,91,9,-40,-61,-10,87,127,-41,36,2,28,-12, 
  /* [12][0][][] */ 127,-16,-58,-9,-22,0,5,74,-8,-13,-10,-49,2,19,-11,19,-21,15,-16,-25,-16,-25,29,-5,-36,21,12,21,10,29,16,-3,-15,-85,-10,15,-49,9,-22,3,-25,-73,-8,-91,-40,-18,61,21, 
  /* [13][0][][] */ 8,20,-8,16,13,-16,-14,-1,12,21,5,30,-6,8,-1,14,-2,5,8,-13,12,-7,11,3,6,2,24,127,15,8,13,-28,24,17,-43,24,-2,-3,11,-30,-5,-15,-13,4,-9,-12,-9,-15, 
  /* [14][0][][] */ 94,-9,67,-90,5,35,-34,-103,-48,-92,-25,85,-69,-7,74,4,21,11,-62,44,20,31,28,-28,13,14,-5,-80,-26,-13,15,127,-14,59,-115,-76,-59,58,94,-6,-51,5,70,8,54,5,23,-12, 
  /* [15][0][][] */ 34,-60,12,8,91,1,124,-79,-9,13,-26,-20,83,-25,-98,107,82,84,127,-60,-48,-27,26,1,-106,25,12,29,34,84,67,-10,20,78,109,124,6,-71,3,-51,112,-18,113,-77,-37,47,-24,65, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.023597301915287971, 0.021286796778440475, 0.031303014606237411, 0.03525131568312645, 0.019787069410085678, 0.029628803953528404, 0.036626234650611877, 0.017950637266039848, 0.029999157413840294, 0.01243677269667387, 0.024759117513895035, 0.016847288236021996, 0.027731487527489662, 0.050305772572755814, 0.012500505894422531, 0.012280966155230999, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { -3493, 42666, -1693, 56090, 8092, 141320, -1864, 52839, 4759, 28096, 30435, 5077, 6745, 34878, -7681, -4312, -435, -8005, 5734, -2423, 2449, -10407, 5930, -17166, -6332, 57666, 117796, 99365, -491, 13956, -5414, 2303, 26251, 998, 35355, 2346, 116768, 14625, 51521, 4688, 4499, 32144, 4511, 8744, 54750, 1357, 11593, 55541, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.0071644333656877e-05, 3.2613996154395863e-05, 0.00016906968085095286, 4.1597078961785883e-05, 0.00014910938625689596, 5.1325729145901278e-05, 0.00014218071009963751, 0.00010563110117800534, 0.00010539843788137659, 3.7239860830595717e-05, 4.7605386498617008e-05, 7.8016440966166556e-05, 3.2646403269609436e-05, 2.7636291633825749e-05, 0.00016416683502029628, 0.00022256768716033548, 0.00020707605290226638, 7.4520234193187207e-05, 0.00011415105836931616, 0.00015907174383755773, 7.8757046139799058e-05, 0.00016815733397379518, 0.00013630947796627879, 9.8259872174821794e-05, 0.00011581434955587611, 7.7086719102226198e-05, 1.3997071619087365e-05, 6.3424347899854183e-05, 0.00011262485350016505, 7.5929616286884993e-05, 0.0001101676098187454, 0.00013974521425552666, 4.7421315684914589e-05, 0.00011887560685863718, 2.8834010663558729e-05, 4.6261062379926443e-05, 4.9619968194747344e-05, 4.4033076846972108e-05, 0.00011902670667041093, 6.7475986725185066e-05, 8.957454701885581e-05, 0.00018306882702745497, 8.7305379565805197e-05, 6.1028331401757896e-05, 2.1834732251591049e-05, 0.00014118455874267966, 6.123706407379359e-05, 1.9393599359318614e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 80,-96,122,100,45,-40,117,-73,64,-95,-79,38,54,-64,-60,-89,93,72,67,90,65,-74,-81,51,-28,-38,-87,-71,-67,70,-53,-108,-8,39,63,67,-71,53,-47,-25,71,-68,73,70,-127,3,84,-24, 87,-116,127,80,-78,-60,-62,-89,84,-115,-58,70,80,-116,-85,102,-15,102,88,127,84,-108,46,79,-44,-64,-73,-85,50,77,-29,-127,-89,82,80,83,-86,83,-89,-21,66,-99,99,89,-85,-127,94,-91, 38,-57,71,52,13,-58,-52,-52,47,-41,1,39,34,-76,-53,-12,-47,40,47,79,37,-41,25,26,-37,-60,-56,-28,37,33,88,-85,-57,60,47,40,-33,35,-55,-6,50,-35,47,50,-17,-12,43,-83, 
  /* [0][1][][] */ 99,-92,-48,91,46,-81,127,-87,91,-111,-67,81,80,-113,1,-127,127,113,78,-39,86,108,-127,82,76,-91,-111,-100,-127,85,-69,-19,-88,75,114,106,-87,84,-79,85,89,-99,111,95,-92,104,103,-115, 127,-127,-75,127,-127,-127,-107,-127,127,-127,-127,127,127,-127,-14,108,-65,127,127,-48,127,127,70,127,127,-127,-127,-127,55,127,-26,13,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-125,-12,127,-127, 77,-67,-30,66,30,-65,-55,-65,57,-30,-53,54,50,-65,-10,16,-66,47,80,-28,53,75,47,65,65,-59,-73,-39,45,44,127,20,-68,82,49,46,-48,59,-61,63,71,-58,49,65,-48,-71,62,-65, 
  /* [0][2][][] */ 62,-59,-48,47,10,-44,73,-43,37,-67,-9,43,65,-100,76,-73,60,57,46,-42,36,-4,-84,39,-16,-41,-63,-55,-84,31,-33,76,-82,37,72,52,-31,42,-37,-98,54,-41,56,49,-29,16,52,-94, 73,-81,-65,77,-62,-60,-85,-65,39,-67,-79,61,78,-62,127,48,-42,80,78,-43,61,-8,36,77,-42,-76,-79,-59,41,60,-21,104,-63,77,65,64,-56,52,-71,-122,71,-74,83,78,-77,51,72,-62, 58,-56,-52,49,20,-24,-27,-41,21,-21,-59,31,40,-22,62,29,-34,16,44,-39,43,6,45,54,-24,-34,-51,-16,42,32,67,64,-16,53,32,34,-23,27,-41,-62,29,-37,26,39,-66,2,36,-15, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034030447714030743, 0.0013860948383808136, 0.0071854614652693272, 0.0017678758595138788, 0.0063371490687131882, 0.0021813435014337301, 0.0060426797717809677, 0.0044893217273056507, 0.0044794334098696709, 0.0015826940070837736, 0.0020232289098203182, 0.0033156985882669687, 0.0013874721480533481, 0.0011745423544198275, 0.0069770901463925838, 0.009459126740694046, 0.0088007319718599319, 0.0031671097967773676, 0.0048514199443161488, 0.0067605492658913136, 0.0033471742644906044, 0.0071466867811977863, 0.0057931528426706791, 0.0041760443709790707, 0.0049221096560359001, 0.0032761855982244015, 0.00059487554244697094, 0.00269553461112082, 0.0047865561209619045, 0.0032270085066556931, 0.0046821231953799725, 0.0059391711838543415, 0.0020154058001935482, 0.0050522130914032459, 0.001225445419549942, 0.0019660950638353825, 0.0021088486537337303, 0.0018714057514443994, 0.005058635026216507, 0.0028677294030785561, 0.0038069181609898806, 0.0077804247848689556, 0.0037104785442352295, 0.0025937040336430073, 0.00092797609977424145, 0.0060003437101840973, 0.0026025751139968634, 0.00082422792911529541, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 990, 477, 2814, 854, 9917, 18205, 7192, -768, -2868, -1270, 2185, 863, 3548, 859, 13415, 5190, 3381, -1340, -1123, 6606, -2078, 17519, 18341, 13737, 5273, 43, 8220, 4478, 5335, -1963, 12106, 7032, -28, -347, 4700, 5513, -1719, 1132, -494, 7218, -428, -2711, -1888, -758, 1480, 8649, 579, 1169, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00031049470999278128, 0.0010254603112116456, 0.00021631174604408443, 0.00025624415138736367, 0.00022650146274827421, 0.00022362875461112708, 0.0001651744096307084, 0.00017006928101181984, 0.00020745964138768613, 0.00046137801837176085, 0.00056064256932586432, 0.00030374835478141904, 0.00035011876025237143, 0.0007942782249301672, 0.00025255230139009655, 0.00026466138660907745, 0.00017548097821418196, 0.00047193019418045878, 0.00019177288049831986, 0.00016782454622443765, 0.00031103714718483388, 0.00014862204261589795, 0.00021199270850047469, 0.00011948846076847985, 0.0002941038110293448, 0.00032518772059120238, 0.0008405309054069221, 0.00037397796404547989, 0.00031481895712204278, 0.00026267071370966733, 0.00022596758208237588, 0.00016450941620860249, 0.00065553974127396941, 0.00021388914319686592, 0.00074710918124765158, 0.00034668922307901084, 0.00062854134012013674, 0.00020980631234124303, 0.0002253067068522796, 0.00024949057842604816, 0.00019771227380260825, 0.00014898455992806703, 0.00031632522586733103, 0.0002139448479283601, 0.0013691146159544587, 0.0001834659487940371, 0.00033831439213827252, 0.0011552181094884872, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,11,-1,56,-35,46,16,-46, 
  /* [1][0][][] */ -3,29,79,8,-51,-16,-6,127, 
  /* [2][0][][] */ 14,2,14,-14,-127,35,11,-20, 
  /* [3][0][][] */ 78,25,14,-115,-127,31,27,-89, 
  /* [4][0][][] */ -127,11,-44,-14,71,-20,27,29, 
  /* [5][0][][] */ -110,-18,23,-44,-127,-3,-9,72, 
  /* [6][0][][] */ 29,-127,-4,-53,-116,-29,27,86, 
  /* [7][0][][] */ -71,-28,-23,73,127,6,-65,-9, 
  /* [8][0][][] */ 37,45,23,-127,39,-45,-61,-93, 
  /* [9][0][][] */ -107,-69,0,33,37,127,-105,11, 
  /* [10][0][][] */ -127,22,31,84,-125,109,28,-94, 
  /* [11][0][][] */ 127,12,44,35,-64,-60,-41,-109, 
  /* [12][0][][] */ 34,-7,39,6,-23,-38,127,67, 
  /* [13][0][][] */ 47,-32,-31,-14,88,101,127,5, 
  /* [14][0][][] */ 14,127,-8,36,-47,-31,35,-26, 
  /* [15][0][][] */ 33,-127,-7,-1,-49,-11,16,34, 
  /* [16][0][][] */ -113,3,4,2,-127,84,42,-8, 
  /* [17][0][][] */ -28,71,-57,-5,36,-127,92,-3, 
  /* [18][0][][] */ 127,-51,-28,-18,-29,22,25,82, 
  /* [19][0][][] */ 127,1,-8,12,-29,21,48,31, 
  /* [20][0][][] */ 36,21,-17,49,68,63,-16,-127, 
  /* [21][0][][] */ -19,63,-36,-53,52,86,-127,-107, 
  /* [22][0][][] */ -127,-60,-39,-106,-51,-54,-105,44, 
  /* [23][0][][] */ -25,-64,-14,52,-127,42,73,-22, 
  /* [24][0][][] */ 127,14,41,-16,-61,2,-28,-47, 
  /* [25][0][][] */ 21,-33,6,9,127,30,38,-29, 
  /* [26][0][][] */ 21,-76,-5,-24,24,-126,127,25, 
  /* [27][0][][] */ -17,-127,25,-11,8,-33,29,0, 
  /* [28][0][][] */ -127,79,-81,3,-12,35,114,48, 
  /* [29][0][][] */ -10,32,-18,22,40,39,-127,-120, 
  /* [30][0][][] */ 104,-6,-9,-35,-127,22,-53,-17, 
  /* [31][0][][] */ 4,-79,70,47,-46,-36,127,109, 
  /* [32][0][][] */ -25,2,19,26,-112,-127,-46,50, 
  /* [33][0][][] */ -20,-19,3,42,-127,-41,-35,47, 
  /* [34][0][][] */ 6,-127,27,-33,28,102,-59,49, 
  /* [35][0][][] */ -20,-59,-127,-20,-6,-66,55,-72, 
  /* [36][0][][] */ -2,127,38,50,27,16,-46,-29, 
  /* [37][0][][] */ -122,33,45,19,42,-1,-54,-127, 
  /* [38][0][][] */ -127,-15,-75,20,92,40,15,61, 
  /* [39][0][][] */ -34,-80,-2,-78,17,-103,93,127, 
  /* [40][0][][] */ -19,-18,-13,-36,-127,57,87,32, 
  /* [41][0][][] */ -67,25,-11,-91,-55,-127,-61,92, 
  /* [42][0][][] */ -16,-127,-69,40,-30,34,-96,-25, 
  /* [43][0][][] */ -69,-33,-24,-116,127,86,53,-50, 
  /* [44][0][][] */ 74,53,-9,-127,47,71,-7,-66, 
  /* [45][0][][] */ -72,-127,-15,20,68,-29,92,9, 
  /* [46][0][][] */ 102,6,30,-16,127,-46,-25,25, 
  /* [47][0][][] */ 127,14,15,90,10,19,8,-66, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00060130056226626039, 0.0019858947489410639, 0.00041890688589774072, 0.00049623951781541109, 0.00043864018516615033, 0.00043307692976668477, 0.00031987490365281701, 0.00032935425406321883, 0.00040176400216296315, 0.00089349946938455105, 0.0010857341112568974, 0.00058823561994358897, 0.00067803601268678904, 0.0015381902921944857, 0.0004890899290330708, 0.00051254022400826216, 0.00033983448520302773, 0.0009139346657320857, 0.00037138519110158086, 0.00032500713132321835, 0.00060235103592276573, 0.00028781977016478777, 0.00041054267785511911, 0.0002314000012120232, 0.00056955812033265829, 0.00062975485343486071, 0.0016277626855298877, 0.00072424148675054312, 0.00060967484023422003, 0.00050868513062596321, 0.00043760627158917487, 0.000318587088258937, 0.0012695108307525516, 0.00041421529022045434, 0.001446843147277832, 0.00067139446036890149, 0.0012172260321676731, 0.00040630853618495166, 0.00043632643064484, 0.0004831606347579509, 0.00038288734504021704, 0.0002885218127630651, 0.00061259185895323753, 0.00041432317811995745, 0.0026514118071645498, 0.00035529807792045176, 0.00065517582697793841, 0.0022371823433786631, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -25823, 35626, -16427, -14062, 18874, 16015, 22620, 20068, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00039199687307700515, 0.00048374425387009978, 0.0011583334999158978, 0.0012548336526378989, 0.00065553316380828619, 0.00033977677230723202, 0.00045962317381054163, 0.00054364331299439073, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -79,53,31,32,62,-31,21,-40,-41,86,-16,17,117,-61,53,-41,73,3,29,-38,-72,11,2,-2,-40,-54,-63,120,23,-43,56,-3,-12,-125,127,44,-27,-4,-18,-21,121,-38,-21,17,-68,74,6,39, 
  /* [1][0][][] */ -8,62,96,-30,-39,-8,-3,-50,-23,21,-1,28,-44,43,-6,-127,-30,-107,-17,-21,-61,19,-52,-6,30,-53,34,-11,19,-19,19,-30,41,26,5,17,-47,-60,60,-39,-26,30,12,35,-4,10,-41,-23, 
  /* [2][0][][] */ 7,-35,2,-57,38,24,4,-32,12,23,4,32,-7,29,-20,-37,-8,127,-8,-57,-9,0,-34,5,99,11,2,-12,-15,6,21,-45,8,-3,12,18,-10,-47,0,15,15,-7,-4,-20,-4,19,-38,-21, 
  /* [3][0][][] */ -7,-86,-14,-13,4,-8,-6,19,15,-10,-2,25,-8,4,30,0,-41,-39,1,1,-16,26,-36,1,5,50,9,26,-7,2,127,2,41,4,-3,2,-32,-9,-4,17,-13,12,-4,24,-6,-28,-36,21, 
  /* [4][0][][] */ -67,-6,-2,-23,-6,-54,-23,-2,56,-30,15,-26,-32,16,35,-6,11,-1,-46,44,19,-23,5,10,29,56,7,47,9,2,-33,-32,10,-127,12,15,-3,-14,-9,11,-35,-17,-6,44,-29,38,-15,-11, 
  /* [5][0][][] */ -21,21,11,-8,-81,-40,7,6,72,-23,17,-19,-4,-95,-9,12,-18,-105,6,16,67,-76,-3,82,-10,-12,-36,-26,-58,-65,22,-19,24,-46,8,-31,90,-12,-61,20,-20,-3,34,-57,127,16,-59,4, 
  /* [6][0][][] */ 2,-19,24,21,65,-2,4,-43,12,-41,24,-85,27,23,-4,-33,27,50,17,-30,-18,74,7,-75,-16,28,-46,-78,-9,23,-2,31,-26,-112,-45,53,13,45,-2,-58,23,13,20,59,127,-45,85,23, 
  /* [7][0][][] */ 4,74,-95,35,-3,70,26,127,-19,22,89,-42,43,-98,-63,24,59,-76,82,-43,119,90,63,-97,3,16,14,-5,10,95,9,24,19,53,-28,-56,-32,-30,-44,-104,4,-54,-11,118,-41,-40,-2,11, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.016659867018461227, 0.020559130236506462, 0.049229174852371216, 0.053330428898334503, 0.027860159054398537, 0.014440512284636497, 0.019533984363079071, 0.023104840889573097, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -53855, -3649, 16000, -3997, -1328, -7686, 2313, 14290, 3563, 44208, -3949, 24094, -7877, -265, 21871, 7806, 309, 12337, 30720, 14762, 1365, -736, 2871, 19826, -8156, 34379, 44111, 37638, 2000, 2513, -2651, 323, 905, 9238, -4941, 25910, -12281, 21614, -24798, 140563, 27754, 25096, 9638, 1074, 13972, 4720, 2077, -5097, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00027562427567318082, 0.00022304130834527314, 0.00012807406892534345, 0.00047390084364451468, 0.00014883292897138745, 9.8734912171494216e-05, 0.00031841488089412451, 0.00023265834897756577, 0.00011969926708843559, 0.00012228995910845697, 9.3711234512738883e-05, 0.00017613179807085544, 0.0001943207171279937, 0.00044626343878917396, 0.00012072042591171339, 0.00020678383589256555, 0.00022952856670599431, 0.00025633274344727397, 7.7362121373880655e-05, 0.00022207546862773597, 0.00024742647656239569, 0.0001917377085192129, 0.00016677941312082112, 0.0001024114535539411, 0.00018353751511313021, 0.00011243321932852268, 0.00032586036832071841, 8.6696214566472918e-05, 0.00016942629008553922, 0.00037370389327406883, 0.00015115758287720382, 0.00022860612079966813, 0.00070362456608563662, 0.00026760503533296287, 0.00021481981093529612, 0.00010514508176129311, 0.00033525677281431854, 0.0001369136298308149, 0.0002403707621851936, 1.824029277486261e-05, 0.0001237395335920155, 5.2858435083180666e-05, 0.00011103396536782384, 0.00022202481341082603, 0.00018927259952761233, 9.909908112604171e-05, 0.00034355162642896175, 8.7763663032092154e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 9,-1,18,118,13,94,-2,25,10,3,11,12,-5,-10,-49,10,3,10,1,-89,-9,-29,127,-5,-4,1,-7,10,-2,-2,10,92,20,27,22,-31,-1,35,4,11,17,-75,-3,-4,15,-2,-13,-15, 127,9,14,-127,41,99,9,9,123,127,5,50,-61,-26,5,8,127,-54,-48,-55,-106,25,-118,13,16,67,-29,-91,29,22,4,-123,5,-60,127,8,-41,-46,-7,113,-74,-79,-23,1,-40,2,-127,21, -23,6,7,19,7,76,5,18,24,3,-18,37,-16,-3,12,4,-102,29,3,62,-34,-12,-24,-7,-4,-69,-2,30,-11,7,5,-18,12,-21,13,-20,-2,43,47,-9,50,46,-9,13,-46,3,5,-8, 
  /* [0][1][][] */ 121,8,-4,-95,27,-31,39,-19,5,5,-9,55,-10,-4,11,-31,-1,-47,-50,-64,14,-71,-126,-12,4,94,-15,-127,-3,23,14,-102,18,-46,-12,127,-2,58,-38,44,-58,-127,41,-97,-45,-18,-20,-1, 20,-121,-127,118,-127,-127,-127,-127,-127,-107,127,-127,127,127,33,-127,-87,127,127,-94,127,127,114,127,127,-127,-127,33,-127,-127,82,127,-127,127,-33,-44,127,-127,127,127,127,-77,127,127,127,-119,105,114, 57,15,46,-11,12,-62,48,21,-27,11,-107,-7,-5,-38,127,7,61,-63,-79,61,12,-40,9,-28,-2,-2,-37,76,28,38,2,10,38,-35,2,68,-4,55,68,-2,-81,2,-75,-36,24,-19,-9,7, 
  /* [0][2][][] */ -53,-7,21,-13,18,25,-37,22,4,-28,13,33,9,-9,-44,17,8,22,-23,92,6,-25,-18,-10,-2,16,2,57,-4,-2,48,-20,-16,-41,-45,-41,-1,32,14,-22,8,-7,45,-49,-36,18,-21,24, 62,127,72,23,30,-29,120,38,16,-7,43,30,-12,-5,-102,24,-56,-54,-48,78,-42,53,9,19,28,-67,-40,32,83,1,127,23,88,-23,-2,-36,-24,-18,-16,123,-27,-24,-34,37,22,-32,2,-127, -40,2,7,2,9,-10,-59,12,-29,-15,-41,-40,30,-13,-12,13,32,25,-24,-127,18,-6,0,-6,-8,-1,-10,-56,-12,9,14,8,-14,89,-42,-22,-1,31,27,-57,3,-5,-30,8,-43,127,-1,1, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011714031919836998, 0.0094792554154992104, 0.005443147849291563, 0.020140785723924637, 0.0063253995031118393, 0.004196233581751585, 0.013532632030546665, 0.0098879793658852577, 0.0050872187130153179, 0.0051973233930766582, 0.0039827274158596992, 0.007485601119697094, 0.0082586305215954781, 0.018966196104884148, 0.0051306178793311119, 0.0087883127853274345, 0.0097549641504883766, 0.010894141159951687, 0.0032878902275115252, 0.0094382073730230331, 0.010515624657273293, 0.0081488527357578278, 0.007088125217705965, 0.0043524866923689842, 0.0078003443777561188, 0.0047784117050468922, 0.013849065639078617, 0.0036845891736447811, 0.0072006173431873322, 0.015882415696978569, 0.0064241969957947731, 0.009715760126709938, 0.029904043301939964, 0.011373213492333889, 0.0091298418119549751, 0.004468665923923254, 0.014248412102460861, 0.0058188289403915405, 0.010215757414698601, 0.00077521242201328278, 0.0052589303813874722, 0.0022464834619313478, 0.0047189434990286827, 0.0094360541552305222, 0.0080440854653716087, 0.0042117107659578323, 0.014600943773984909, 0.0037299555260688066, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 80946, 5188, 9961, 12804, 2971, 12642, -1968, -513, 786, 2121, 6189, 601, 1687, -1120, 4926, -2551, 5266, 9923, -332, 24871, 11106, 3825, 8637, -679, 8305, 5146, 21135, 10228, -546, -2657, 486, 1631, -2054, 9539, 6605, 8849, 8561, 3769, 21896, 3128, -427, 1806, 985, 3718, 5462, 1765, -2248, 5000, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 5.3949737775838003e-05, 0.00040649506263434887, 0.00016829835658427328, 0.00022698729299008846, 0.00074119766941294074, 0.00037334972876124084, 0.00090113910846412182, 0.00090821844059973955, 0.00034683395642787218, 0.00051619071746245027, 0.00037432447425089777, 0.00041034264722838998, 0.0006305760471150279, 0.00046936527360230684, 0.0002014512283494696, 0.0015214458107948303, 0.00029595024534501135, 0.00042148120701313019, 0.0011067282175645232, 0.00010401737381471321, 0.00012955158308614045, 0.00026616867398843169, 0.00044848336256109178, 0.00083589786663651466, 0.00016853933630045503, 0.00022292243374977261, 0.00018429191550239921, 0.00036339115467853844, 0.00044815611909143627, 0.00092014583060517907, 0.00043401253060437739, 0.00034476022119633853, 0.00091348070418462157, 0.00022943768999539316, 0.00020221300655975938, 0.00022045537480153143, 0.00045220344327390194, 0.0003299339150544256, 0.0001076641128747724, 0.0014686484355479479, 0.00078178825788199902, 0.0015471184160560369, 0.00033553579123690724, 0.0003258977085351944, 0.00021811082842759788, 0.00046153576113283634, 0.00046056843711994588, 0.0005482151173055172, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 17,21,-5,-35,127,41,-35,-31, 
  /* [1][0][][] */ 14,-9,16,127,0,-5,14,18, 
  /* [2][0][][] */ 33,-127,-42,93,16,-76,32,-57, 
  /* [3][0][][] */ 127,-57,9,-1,-17,-5,37,30, 
  /* [4][0][][] */ 25,-46,127,60,-22,-2,88,-107, 
  /* [5][0][][] */ 8,32,-9,19,127,6,-34,1, 
  /* [6][0][][] */ 48,67,59,127,-55,36,1,-43, 
  /* [7][0][][] */ -27,127,7,-1,23,15,-12,-10, 
  /* [8][0][][] */ 52,102,86,37,-127,10,-30,-116, 
  /* [9][0][][] */ -99,-30,8,-5,52,127,41,-34, 
  /* [10][0][][] */ -127,-101,24,109,15,112,-22,76, 
  /* [11][0][][] */ -127,-21,51,-8,5,50,-42,-37, 
  /* [12][0][][] */ 127,-41,-24,25,24,-4,32,-42, 
  /* [13][0][][] */ 2,11,-46,2,21,127,-60,69, 
  /* [14][0][][] */ 8,-35,-32,85,41,127,-77,-33, 
  /* [15][0][][] */ -1,127,-6,13,-14,-12,-12,-80, 
  /* [16][0][][] */ -59,-127,-10,-51,11,-29,78,-15, 
  /* [17][0][][] */ 28,127,-21,28,2,16,-63,17, 
  /* [18][0][][] */ -14,3,-127,-17,46,21,-37,23, 
  /* [19][0][][] */ -75,57,79,-38,-127,16,35,-24, 
  /* [20][0][][] */ -127,-71,-9,86,16,-91,111,-7, 
  /* [21][0][][] */ -47,-8,51,-18,-127,12,-104,-18, 
  /* [22][0][][] */ -127,41,86,-29,-21,-10,32,61, 
  /* [23][0][][] */ -54,-42,4,-17,9,24,-127,-76, 
  /* [24][0][][] */ -10,33,-127,-19,19,54,-31,85, 
  /* [25][0][][] */ 47,-38,58,127,-2,4,40,-16, 
  /* [26][0][][] */ -21,-28,8,50,-9,110,127,-33, 
  /* [27][0][][] */ 61,7,49,-20,127,55,-23,-14, 
  /* [28][0][][] */ -57,79,-63,-36,34,81,-10,127, 
  /* [29][0][][] */ 6,24,-2,-27,34,30,-127,-75, 
  /* [30][0][][] */ 11,-7,29,-127,-18,-19,-26,-12, 
  /* [31][0][][] */ -127,39,26,68,-84,34,-77,16, 
  /* [32][0][][] */ 38,65,6,-67,-5,25,-60,-127, 
  /* [33][0][][] */ -33,8,20,-15,-127,-11,25,-29, 
  /* [34][0][][] */ -90,127,55,101,-51,-30,-32,-21, 
  /* [35][0][][] */ 22,127,-26,-28,-23,45,-2,-81, 
  /* [36][0][][] */ -27,26,30,16,1,61,-127,-12, 
  /* [37][0][][] */ 1,-14,-43,64,37,-93,127,-72, 
  /* [38][0][][] */ -21,-96,-66,-17,9,127,-21,37, 
  /* [39][0][][] */ -9,-125,-21,-14,48,-41,-67,-127, 
  /* [40][0][][] */ 36,52,-30,5,2,0,-119,-127, 
  /* [41][0][][] */ 13,-25,17,-47,1,85,-54,127, 
  /* [42][0][][] */ 59,57,-70,5,-41,118,47,-127, 
  /* [43][0][][] */ -43,-11,-54,-127,46,6,-85,-14, 
  /* [44][0][][] */ -55,-11,-23,35,22,127,8,-16, 
  /* [45][0][][] */ -108,19,-63,46,-1,-1,127,19, 
  /* [46][0][][] */ -76,120,59,-45,30,127,-63,26, 
  /* [47][0][][] */ 13,15,71,127,-37,50,-29,-36, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00014549396291840822, 0.0010962532833218575, 0.00045387423597276211, 0.00061214907327666879, 0.0019988936837762594, 0.001006865524686873, 0.0024302306119352579, 0.0024493224918842316, 0.00093535671476274729, 0.0013920852215960622, 0.001009494299069047, 0.0011066296137869358, 0.0017005645204335451, 0.0012658043997362256, 0.0005432823090814054, 0.0041031003929674625, 0.00079813128104433417, 0.0011366686085239053, 0.0029846720863133669, 0.00028051852132193744, 0.00034938027965836227, 0.00071781512815505266, 0.0012094891862943769, 0.0022542851511389017, 0.00045452409540303051, 0.00060118676628917456, 0.00049700634554028511, 0.00098000885918736458, 0.0012086066417396069, 0.0024814887437969446, 0.001170463627204299, 0.00092976412270218134, 0.0024635139852762222, 0.00061875738902017474, 0.00054533669026568532, 0.00059453351423144341, 0.0012195216258987784, 0.00088977994164451957, 0.00029035320039838552, 0.0039607142098248005, 0.0021083601750433445, 0.0041723353788256645, 0.00090488727437332273, 0.00087889493443071842, 0.00058821064885705709, 0.0012446894543245435, 0.0012420807033777237, 0.0014784500235691667, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -4034, -23331, 41051, 23132, -11410, -7949, 28108, 8408, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00079264072701334953, 0.00061999500030651689, 0.00056764372857287526, 0.0010568747529760003, 0.00048572366358712316, 0.00091483490541577339, 0.00067285745171830058, 0.00066119089024141431, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -26,-15,13,-98,19,-27,12,4,10,32,4,-8,92,0,-7,6,0,-7,-10,2,85,-21,13,6,25,50,33,-3,16,8,9,-127,1,8,12,-15,-15,1,-9,36,-7,-36,-8,-6,14,-4,2,32, 
  /* [1][0][][] */ -33,4,-15,1,46,23,-31,74,9,4,-10,-54,9,0,16,33,0,30,44,-76,-7,11,127,34,-25,19,54,5,-4,-7,13,-9,21,2,-25,-32,13,-20,24,-7,-10,1,-83,0,-59,-8,-72,-86, 
  /* [2][0][][] */ -31,12,-43,-3,18,23,31,29,-12,80,2,-40,29,0,5,46,0,7,-127,11,3,30,-3,-36,-36,-6,44,-30,10,6,48,33,0,-39,-93,-26,25,53,-18,-6,55,39,-24,39,28,-85,22,25, 
  /* [3][0][][] */ -28,-1,7,7,-9,44,6,-13,80,8,-22,48,40,0,-25,17,0,19,-9,9,-15,18,-5,-21,5,4,-17,4,-31,20,10,5,-46,19,-31,-3,-34,3,13,-127,4,0,-21,-46,-10,-4,-15,5, 
  /* [4][0][][] */ 11,-6,127,64,5,-13,-3,22,-6,-26,-16,-16,-82,0,-9,22,0,6,20,-1,97,-14,6,31,-5,59,-24,55,-18,7,-11,110,14,36,-9,13,1,-30,6,-23,15,-125,-1,-7,1,-7,2,12, 
  /* [5][0][][] */ 11,62,11,6,-18,62,30,28,-28,51,6,68,19,0,-127,-6,0,24,-64,9,-34,10,-24,42,1,15,12,3,-23,37,21,-16,44,27,-76,-1,27,1,-32,7,33,-39,-33,38,15,92,12,27, 
  /* [6][0][][] */ -22,-30,-9,-8,42,-30,-8,6,39,-6,-2,127,8,0,-110,41,0,2,39,-16,-19,20,24,-51,49,-36,5,-44,64,-9,-4,-13,81,-21,43,-22,7,9,-73,-44,-24,-7,9,-27,-18,-57,-28,-21, 
  /* [7][0][][] */ -71,-11,-5,-3,127,23,75,26,-18,-5,9,-6,-33,0,72,90,0,16,7,68,-14,-8,-12,46,-11,-62,49,-8,50,57,49,-17,1,-62,1,-28,14,53,-36,46,63,5,-20,-6,80,24,61,62, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.033687230199575424, 0.026349786669015884, 0.024124857038259506, 0.044917173683643341, 0.020643254742026329, 0.038880482316017151, 0.028596442192792892, 0.028100611642003059, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 66439, 54810, 69578, 49220, 748, 15759, 840, 28171, 23901, 57607, 25048, -4038, -48889, -127, 83673, 1119, -204, 22736, -995, 3447, -18852, -4577, 90341, 53537, 55677, 41554, 57301, 18910, -3550, 11519, -5241, -50425, 24438, 75023, 19926, 625, 62022, 614, 188888, -24094, 12964, -27826, 4606, 114055, -779, 126451, 307, -21925, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.9470035163685679e-05, 6.8518995249178261e-05, 8.4225321188569069e-05, 0.00011864208499900997, 0.0001339510636171326, 0.00010929405107162893, 0.00018485200416762382, 5.1168299251003191e-05, 9.6908202976919711e-05, 1.9499628251651302e-05, 5.178069113753736e-05, 3.1643081456422806e-05, 0.00013633408525492996, 0.005541567225009203, 3.1218543881550431e-05, 0.0002047607849817723, 0.0027484172023832798, 8.2276656030444428e-06, 7.707587064942345e-05, 0.00016676585073582828, 0.00010651943739503622, 7.4876152211800218e-05, 6.5266300225630403e-05, 2.4521035811631009e-05, 2.0270843378966674e-05, 6.8388493673410267e-05, 2.3534212232334539e-05, 3.7972575228195637e-05, 0.00050236453535035253, 4.7290293878177181e-05, 3.8460722862510011e-05, 0.00015625396918039769, 0.000103446000139229, 1.1602282938838471e-05, 0.00010607131116557866, 0.00018636630557011813, 9.6410876722075045e-06, 0.00057717174058780074, 2.392978967691306e-05, 9.5978095487225801e-05, 6.0193928220542148e-05, 0.00014998573169577867, 0.00011494347563711926, 7.3549717853893526e-06, 0.00012902007438242435, 4.5878856326453388e-05, 0.00016782566672191024, 5.8477970014791936e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -36,-21,-17,-25,9,-41,-80,-82,-23,-63,22,57,39,-71,116,-42,-113,-90,46,-12,8,-92,-121,-75,-35,-127,-67,-20,67,11,90,29,-127,-84,-11,45,19,47,-127,80,-76,-13,99,-102,-5,-30,-92,112, 72,8,-32,-43,53,-127,-127,-85,71,-84,-117,83,34,-82,0,63,-52,-126,55,6,10,-122,-127,-68,-5,-111,-114,-39,-46,19,-55,53,27,-127,61,78,21,69,-92,127,-127,6,123,-127,-1,-21,-123,95, -34,31,-5,-13,-63,-110,-63,-21,90,-9,-127,21,14,-71,-102,-11,-127,-23,33,9,-9,-68,-39,-22,-10,-57,-62,-36,-3,16,-27,11,107,-73,67,28,19,32,-18,12,-78,7,-2,-69,-16,8,-62,17, 
  /* [0][1][][] */ -74,-127,-53,-36,-7,56,103,-103,-17,-109,-14,110,90,-64,29,-105,-121,-104,86,-81,52,-77,-101,-127,41,-98,-83,-41,127,-63,127,82,-43,-85,-14,78,-33,-80,-100,95,49,60,107,-90,-100,-122,88,126, 127,-83,-127,-127,127,41,99,-127,106,-127,-95,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-126,-107,127,-86,-127,-127,-113,-127,-65,127,26,-86,125,127,-62,-127,-89,96,66,127,127,-117,-111,-127,127,127, -50,22,-68,-91,-125,-28,31,-37,127,-24,-72,34,60,-70,-26,-44,-37,-35,45,-75,57,-72,-43,-21,52,-11,-55,-53,12,-86,-34,23,29,-97,127,23,-34,-68,-6,-15,39,57,13,-68,-58,-37,63,43, 
  /* [0][2][][] */ -52,-96,-39,-35,3,38,-2,-39,-21,-66,-18,56,74,-127,-127,-65,-43,-8,73,75,68,-32,-14,-62,33,-61,-8,-58,75,28,67,62,110,-21,-45,-16,-106,39,-17,38,10,39,8,-59,102,-74,6,36, 85,-80,-86,-89,78,24,9,-40,42,-66,-24,55,79,-26,16,92,-24,-24,71,116,85,-45,-20,-57,90,-68,-24,-105,-52,46,-43,116,-21,-41,74,9,-127,55,-14,-1,18,33,17,-51,127,-101,-10,31, -27,27,-42,-44,-87,-15,25,-14,62,-9,-2,39,34,-43,111,-33,-93,7,26,59,91,-56,-2,4,50,-4,-12,-77,-8,31,-23,40,-89,-40,71,3,-18,21,16,-36,15,36,-8,-31,63,-29,-3,5, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038024764508008957, 0.0029120573308318853, 0.0035795760340988636, 0.0050422884523868561, 0.0056929201819002628, 0.004644996952265501, 0.0078562097623944283, 0.0021746526472270489, 0.0041185985319316387, 0.00082873419160023332, 0.002200679387897253, 0.0013448309618979692, 0.005794198252260685, 0.23551659286022186, 0.0013267881004139781, 0.0087023330852389336, 0.1168077290058136, 0.00034967579995281994, 0.0032757243607193232, 0.0070875482633709908, 0.0045270761474967003, 0.0031822363380342722, 0.0027738176286220551, 0.0010421440238133073, 0.00086151080904528499, 0.0029065108392387629, 0.0010002040071412921, 0.0016138344071805477, 0.021350491791963577, 0.0020098374225199223, 0.0016345806652680039, 0.0066407937556505203, 0.0043964548967778683, 0.00049309700261801481, 0.0045080306008458138, 0.0079205678775906563, 0.00040974622243084013, 0.024529797956347466, 0.0010170160094276071, 0.004079069010913372, 0.00255824183113873, 0.0063743935897946358, 0.0048850974999368191, 0.00031258628587238491, 0.0054833530448377132, 0.0019498512847349048, 0.0071325907483696938, 0.0024853136856108904, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 6254, -195, 5814, 12247, 6207, 9857, 24465, -385, -597, -231, 4549, 262, 11762, -90197288, 3629, 26624, -72811936, -162, -252, 17700, 2803, 43, -5, 331, 3077, -878, 77, 975, 10815, 1915, 2768, 15582, 5408, 341, -438, -3542, 639, 6285, -245, 17660, 2524, 9902, -1391, -77, 17080, -295, 22106, 4277, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00033247453393414617, 0.0003578303731046617, 0.00052632699953392148, 0.00016662949929013848, 0.00030913556111045182, 0.00021091118105687201, 0.00014946426381357014, 0.00084400316700339317, 0.0003278080839663744, 0.0041064550168812275, 0.00035443840897642076, 0.0026624975726008415, 0.00019370808149687946, 1.7980990030252997e-09, 0.00079048128100112081, 0.0001258445845451206, 1.7980990030252997e-09, 0.0039466731250286102, 0.00055846449686214328, 0.00021897275291848928, 0.00040925500798039138, 0.0040260790847241879, 0.00039987076888792217, 0.0018547677900642157, 0.0012707079295068979, 0.00066033372422680259, 0.0021059894934296608, 0.0010575292399153113, 0.00012340597459115088, 0.0015041715232655406, 0.001073561143130064, 0.00015156202425714582, 0.00016520012286491692, 0.0089837200939655304, 0.00045846172724850476, 0.00032070343149825931, 0.0024604946374893188, 0.00020149075135122985, 0.0030548807699233294, 0.00018100360466632992, 0.0011277026496827602, 0.0002217555302195251, 0.00018839890253730118, 0.0076282359659671783, 0.00029045218252576888, 0.00064543937332928181, 0.0001232569629792124, 0.00018593760614749044, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 30,-127,73,-38,93,-25,-84,28, 
  /* [1][0][][] */ 58,100,49,-22,-17,0,-127,126, 
  /* [2][0][][] */ 27,-11,-59,65,37,127,46,44, 
  /* [3][0][][] */ 108,104,-83,127,-79,-18,-6,27, 
  /* [4][0][][] */ -24,-22,58,2,2,-26,-52,-127, 
  /* [5][0][][] */ 58,-56,-110,-10,-98,-71,71,127, 
  /* [6][0][][] */ 40,54,-91,-76,127,84,85,-26, 
  /* [7][0][][] */ 127,9,-11,-36,39,-26,74,-56, 
  /* [8][0][][] */ 10,-15,40,127,69,71,37,-114, 
  /* [9][0][][] */ 66,-127,-31,-9,-10,16,-77,72, 
  /* [10][0][][] */ -125,71,-15,127,-6,92,-104,121, 
  /* [11][0][][] */ -13,-11,-9,-54,-127,-23,20,-16, 
  /* [12][0][][] */ 11,12,-43,65,-127,-32,72,66, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 0,-1,-5,3,39,127,43,40, 
  /* [15][0][][] */ -4,-61,14,-125,93,26,-69,127, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 9,38,127,82,-26,49,27,18, 
  /* [18][0][][] */ 62,-127,10,22,-23,-32,-83,-17, 
  /* [19][0][][] */ -127,-68,-27,78,-107,-40,-71,10, 
  /* [20][0][][] */ 11,37,-10,53,-9,-127,-13,36, 
  /* [21][0][][] */ 14,46,127,39,-41,-44,39,48, 
  /* [22][0][][] */ -100,5,-127,-42,-10,5,-85,-13, 
  /* [23][0][][] */ -88,127,-2,13,-7,16,123,-92, 
  /* [24][0][][] */ 28,-57,-43,73,-28,-92,127,97, 
  /* [25][0][][] */ -19,30,52,3,127,91,-96,-29, 
  /* [26][0][][] */ -85,-20,-127,-18,1,17,-87,-22, 
  /* [27][0][][] */ -40,-7,-39,4,-80,123,127,62, 
  /* [28][0][][] */ 2,-49,-11,109,45,127,22,-25, 
  /* [29][0][][] */ 69,93,127,-15,5,36,110,-55, 
  /* [30][0][][] */ -60,75,-41,-127,94,16,93,0, 
  /* [31][0][][] */ -10,-100,-10,-53,28,-93,115,127, 
  /* [32][0][][] */ -2,34,-54,56,-42,47,95,127, 
  /* [33][0][][] */ 25,58,-12,-62,-19,-23,12,127, 
  /* [34][0][][] */ -14,38,-6,-127,31,-22,0,118, 
  /* [35][0][][] */ 94,-31,-4,-88,29,-78,127,-17, 
  /* [36][0][][] */ -127,-10,-45,-32,-90,-11,-79,93, 
  /* [37][0][][] */ 5,-33,37,50,-78,127,63,122, 
  /* [38][0][][] */ 7,5,-3,63,127,-8,9,29, 
  /* [39][0][][] */ 38,60,84,-103,70,4,-65,127, 
  /* [40][0][][] */ 92,-2,17,-41,-28,-9,127,-51, 
  /* [41][0][][] */ -15,0,-9,67,37,127,31,84, 
  /* [42][0][][] */ -127,42,122,15,-78,12,-32,119, 
  /* [43][0][][] */ -8,-80,1,44,16,-1,-16,-127, 
  /* [44][0][][] */ 106,22,-93,-127,98,11,-33,-100, 
  /* [45][0][][] */ -96,127,3,7,-8,41,94,-27, 
  /* [46][0][][] */ -122,-52,127,55,-88,17,-105,102, 
  /* [47][0][][] */ 86,121,96,-36,114,-71,127,-54, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00072796596214175224, 0.00078348355600610375, 0.0011524135479703546, 0.00036484180600382388, 0.00067686440888792276, 0.00046179827768355608, 0.00032725784694775939, 0.0018479778664186597, 0.00071774859679862857, 0.0089912433177232742, 0.00077605672413483262, 0.0058296425268054008, 0.00042413140181452036, 3.937008052901092e-09, 0.0017307896632701159, 0.00027554162079468369, 3.937008052901092e-09, 0.0086413947865366936, 0.0012227798579260707, 0.00047944940160959959, 0.00089607981499284506, 0.0088152578100562096, 0.0008755326853133738, 0.0040610865689814091, 0.0027822647243738174, 0.0014458264922723174, 0.0046111461706459522, 0.0023155014496296644, 0.00027020220295526087, 0.0032934423070400953, 0.0023506039287894964, 0.00033185098436661065, 0.00036171212559565902, 0.019670205190777779, 0.0010038198670372367, 0.00070219271583482623, 0.0053873490542173386, 0.00044117186916992068, 0.0066887806169688702, 0.00039631445542909205, 0.0024691489525139332, 0.00048554240493103862, 0.00041250674985349178, 0.016702320426702499, 0.00063595641404390335, 0.0014132147189229727, 0.00026987594901584089, 0.00040711765177547932, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 8156, -47930, -14078, -9129, -28030, -3396, -23905, -22097, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021522934548556805, 0.0018394390353932977, 0.0025334896054118872, 0.0012444327585399151, 0.0011018546065315604, 0.0019024709472432733, 0.0012463041348382831, 0.0013232756173238158, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-33,-13,-11,104,-19,17,5,-9,-127,-73,7,0,77,-26,0, 
  /* [1][0][][] */ 0,-19,-11,73,92,-12,39,16,-8,8,127,-39,0,34,20,0, 
  /* [2][0][][] */ 0,-4,5,-15,-49,1,45,2,-7,27,-42,10,0,127,-5,0, 
  /* [3][0][][] */ 0,15,-22,-127,88,-16,58,22,-9,50,7,35,0,-2,11,0, 
  /* [4][0][][] */ 0,65,-2,49,-127,24,121,13,11,-74,26,17,0,-13,27,0, 
  /* [5][0][][] */ 0,-2,0,-3,-24,-22,-12,9,5,4,-3,-21,0,-8,127,0, 
  /* [6][0][][] */ 0,28,10,22,54,-2,-54,-24,-10,-119,123,58,0,127,48,0, 
  /* [7][0][][] */ 0,8,-13,127,14,3,-9,17,-8,78,-52,46,0,22,-9,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.09147246927022934, 0.078176155686378479, 0.10767330229282379, 0.052888393402099609, 0.046828817576169968, 0.080855011940002441, 0.052967924624681473, 0.056239213794469833, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 17015, 2050, 13856, 7714, 733595, 13184, 912, -31721, 4286, 31358, 12703, -445, 30912, 6579, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00014200838631950319, 0.0019604035187512636, 0.00023923600383568555, 0.00018095158156938851, 4.1518997022649273e-06, 0.00038357928860932589, 0.0044377157464623451, 1.2906270967505407e-05, 0.00033654097933322191, 0.00017764596850611269, 0.00072745088255032897, 0.00072724185883998871, 0.00016176581266336143, 0.0002764505916275084, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-81,-126,40,-62,79,-77,-89,-3,-7,31,-127,6,54,-73, 51,24,-127,127,127,-127,127,-127,-84,127,-127,54,-105,7,127,-25, 24,-24,85,-2,-70,67,-96,72,-95,-26,5,-17,61,3,-101,-29, 
  /* [0][1][][] */ -127,127,-23,14,-41,17,-29,9,-27,1,3,-111,-49,8,-29,-14, -78,-40,-57,-14,-5,-24,7,-31,-108,-87,23,-13,-104,-127,1,23, 14,1,60,2,5,37,-26,31,-127,7,0,-1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-70,64,2,-5,36,-40,49,-75,1,-1,6,40,2,-27,23, 23,-3,29,-2,-25,42,-34,17,-124,-12,-1,87,-58,1,-29,-111, 21,-7,16,0,6,16,9,20,-114,5,0,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0060353563167154789, 0.083317145705223083, 0.010167529806494713, 0.0076904422603547573, 0.00017645573825575411, 0.016302119940519333, 0.18860292434692383, 0.00054851651657372713, 0.014302991330623627, 0.0075499536469578743, 0.030916662886738777, 0.030907778069376945, 0.0068750469945371151, 0.011749149300158024, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 25461, -226142, 36211, 239111, -99558, 48930, -10794, -187045, 62990, 63099, 1027824, -1073741824, 171815, 65415, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 9.65715735219419e-05, 7.2591443313285708e-05, 4.5107946789357811e-05, 1.3401894648268353e-05, 0.0001700010325293988, 5.1288101531099528e-05, 0.00015790402540005744, 5.4203424042498227e-06, 3.491697134450078e-05, 5.4953634389676154e-05, 5.6222233979497105e-06, 1.1533876076441629e-09, 2.5353238015668467e-05, 2.3039467123453505e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 14,-22,25, -30,-38,-1, -127,-87,-50, 
  /* [1][1][][] */ -25,-16,13, -46,-12,-4, -38,-13,6, 
  /* [1][2][][] */ -25,14,28, -30,-4,18, 1,-14,22, 
  /* [2][0][][] */ 80,-31,-15, 127,73,-16, 97,-8,9, 
  /* [2][1][][] */ 65,-9,-6, 121,70,-36, 75,10,0, 
  /* [2][2][][] */ 90,-38,22, 119,-30,-15, 70,-25,21, 
  /* [3][0][][] */ 42,65,-7, 13,83,10, -12,13,17, 
  /* [3][1][][] */ 37,63,-15, 24,127,-17, -41,-5,-2, 
  /* [3][2][][] */ -2,21,-26, 4,53,-18, -25,-1,-8, 
  /* [4][0][][] */ 43,91,-54, 23,78,-64, -52,-70,-81, 
  /* [4][1][][] */ 85,127,14, 94,112,-20, 18,-26,-81, 
  /* [4][2][][] */ 101,101,-20, 101,110,-50, -6,-17,-46, 
  /* [5][0][][] */ 95,108,-50, -8,127,-15, -49,52,70, 
  /* [5][1][][] */ 86,46,-64, -25,-28,-45, -60,-5,59, 
  /* [5][2][][] */ 90,105,76, 15,54,76, -51,-7,78, 
  /* [6][0][][] */ 42,-68,4, 52,-93,19, 13,-18,7, 
  /* [6][1][][] */ 61,-90,71, 76,-127,70, 17,-22,26, 
  /* [6][2][][] */ 27,-31,46, 19,-43,39, -16,11,9, 
  /* [7][0][][] */ 0,-15,-32, -84,-75,-55, 2,-13,-21, 
  /* [7][1][][] */ -20,-37,-39, -99,-127,-61, -20,-56,-46, 
  /* [7][2][][] */ 13,35,-16, 53,6,-32, 1,-34,-42, 
  /* [8][0][][] */ 126,126,124, 126,126,124, 126,126,124, 
  /* [8][1][][] */ 127,127,124, 127,127,124, 127,127,124, 
  /* [8][2][][] */ 126,127,124, 126,127,124, 127,127,124, 
  /* [9][0][][] */ 6,12,78, -3,14,75, 3,26,94, 
  /* [9][1][][] */ 90,100,3, 35,127,39, -24,40,74, 
  /* [9][2][][] */ -36,-42,-7, -16,-21,29, 8,32,30, 
  /* [10][0][][] */ -31,-88,-13, 31,95,26, -11,-14,3, 
  /* [10][1][][] */ -66,-109,-8, 76,127,20, -19,-29,5, 
  /* [10][2][][] */ -35,-22,8, 34,20,-6, -9,-3,13, 
  /* [11][0][][] */ -69,-104,-54, -54,-109,-44, -29,-127,-75, 
  /* [11][1][][] */ -71,-75,-57, -75,-86,-73, -35,-74,-71, 
  /* [11][2][][] */ -28,-33,-66, 62,96,42, -50,12,-33, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -69,-112,-28, -77,-127,-35, -23,-31,-14, 
  /* [13][1][][] */ 51,112,6, 49,125,17, -5,6,4, 
  /* [13][2][][] */ -19,-24,-4, -8,-24,-8, -11,-4,-11, 
  /* [14][0][][] */ 38,-15,-97, 59,-27,-71, 24,5,-25, 
  /* [14][1][][] */ 103,-19,-127, 98,-39,-120, 61,14,-50, 
  /* [14][2][][] */ 84,-1,-120, 64,-15,-112, 29,30,-50, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.024625750258564949, 0.018510816618800163, 0.011502525769174099, 0.0034174828324466944, 0.043350260704755783, 0.01307846512645483, 0.0402655228972435, 0.0013821872416883707, 0.0089038275182247162, 0.01401317585259676, 0.0014336669119074941, 2.9411381774480105e-07, 0.0064650755375623703, 0.005875063594430685, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.45671713352203369, } };
const TfArray<1, int> quant46_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.37080395221710205, } };
const TfArray<1, int> quant50_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.4235665500164032, } };
const TfArray<1, int> quant53_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.51637190580368042, } };
const TfArray<1, int> quant54_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.2374911904335022, } };
const TfArray<1, int> quant58_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.18205437064170837, } };
const TfArray<1, int> quant61_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.28193011879920959, } };
const TfArray<1, int> quant62_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.22805148363113403, } };
const TfArray<1, int> quant65_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.34268853068351746, } };
const TfArray<1, int> quant66_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.050056550651788712, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10220161825418472, } };
const TfArray<1, int> quant69_zero = { 1, { -42 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
